Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    FALSE
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declaracoes bloco
Rule 2     declaracoes -> def_const def_tipos def_var def_rotina
Rule 3     declaracoes -> empty
Rule 4     def_const -> CONST lista_const
Rule 5     def_const -> empty
Rule 6     lista_const -> ID EQUALS const_valor SEMICOLON lista_const
Rule 7     lista_const -> ID EQUALS const_valor SEMICOLON
Rule 8     const_valor -> NUMERO
Rule 9     const_valor -> STRING
Rule 10    def_tipos -> TYPE lista_tipos
Rule 11    def_tipos -> empty
Rule 12    lista_tipos -> ID EQUALS tipo SEMICOLON lista_tipos
Rule 13    lista_tipos -> ID EQUALS tipo SEMICOLON
Rule 14    def_var -> VAR lista_var
Rule 15    def_var -> empty
Rule 16    lista_var -> var SEMICOLON lista_var
Rule 17    lista_var -> var SEMICOLON
Rule 18    var -> lista_id COLON tipo
Rule 19    lista_id -> ID COMMA lista_id
Rule 20    lista_id -> ID
Rule 21    tipo -> INTEGER
Rule 22    tipo -> REAL
Rule 23    tipo -> CHAR
Rule 24    tipo -> BOOLEAN
Rule 25    tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo
Rule 26    tipo -> RECORD lista_campos END
Rule 27    lista_campos -> campo SEMICOLON lista_campos
Rule 28    lista_campos -> campo SEMICOLON
Rule 29    campo -> lista_id COLON tipo
Rule 30    def_rotina -> rotina def_rotina
Rule 31    def_rotina -> empty
Rule 32    rotina -> function
Rule 33    rotina -> procedure
Rule 34    function -> FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina
Rule 35    procedure -> PROCEDURE ID LPAREN parametros RPAREN bloco_rotina
Rule 36    parametros -> param
Rule 37    parametros -> empty
Rule 38    param -> lista_id COLON tipo
Rule 39    param -> lista_id COLON tipo SEMICOLON param
Rule 40    bloco_rotina -> declaracoes bloco
Rule 41    bloco -> BEGIN lista_com END
Rule 42    lista_com -> comando SEMICOLON lista_com
Rule 43    lista_com -> comando SEMICOLON
Rule 44    lista_com -> empty
Rule 45    comando -> atribuicao
Rule 46    comando -> leitura
Rule 47    comando -> escrita
Rule 48    comando -> repeticao
Rule 49    comando -> condicional
Rule 50    comando -> chamada_rotina
Rule 51    atribuicao -> ID ASSIGN exp
Rule 52    leitura -> READ LPAREN ID RPAREN
Rule 53    escrita -> WRITE LPAREN const_valor RPAREN
Rule 54    repeticao -> WHILE exp_logica DO bloco
Rule 55    repeticao -> FOR atribuicao TO exp DO bloco
Rule 56    condicional -> IF exp_logica THEN bloco
Rule 57    condicional -> IF exp_logica THEN bloco ELSE bloco
Rule 58    exp -> NUMERO
Rule 59    exp -> ID
Rule 60    exp -> LPAREN exp RPAREN
Rule 61    exp -> exp PLUS exp
Rule 62    exp -> exp MINUS exp
Rule 63    exp -> exp TIMES exp
Rule 64    exp -> exp DIVIDE exp
Rule 65    exp_logica -> exp operador_logico exp
Rule 66    operador_logico -> EQUALS
Rule 67    operador_logico -> NOT_EQUALS
Rule 68    operador_logico -> LESS_THAN
Rule 69    operador_logico -> GREATER_THAN
Rule 70    operador_logico -> LESS_EQUAL
Rule 71    operador_logico -> GREATER_EQUAL
Rule 72    operador_logico -> AND
Rule 73    operador_logico -> OR
Rule 74    empty -> <empty>
Rule 75    chamada_rotina -> ID LPAREN argumentos RPAREN SEMICOLON
Rule 76    argumentos -> lista_param
Rule 77    argumentos -> empty
Rule 78    lista_param -> parametro COMMA lista_param
Rule 79    lista_param -> parametro
Rule 80    parametro -> exp
Rule 81    parametro -> ID

Terminals, with rules where they appear

AND                  : 72
ARRAY                : 25
ASSIGN               : 51
BEGIN                : 41
BOOLEAN              : 24
CHAR                 : 23
COLON                : 18 29 34 38 39
COMMA                : 19 78
CONST                : 4
DIVIDE               : 64
DO                   : 54 55
DOT                  : 
ELSE                 : 57
END                  : 26 41
EQUALS               : 6 7 12 13 66
FALSE                : 
FOR                  : 55
FUNCTION             : 34
GREATER_EQUAL        : 71
GREATER_THAN         : 69
ID                   : 1 6 7 12 13 19 20 34 35 51 52 59 75 81
IF                   : 56 57
INTEGER              : 21
LBRACKET             : 25
LESS_EQUAL           : 70
LESS_THAN            : 68
LPAREN               : 34 35 52 53 60 75
MINUS                : 62
NOT_EQUALS           : 67
NUMERO               : 8 25 58
OF                   : 25
OR                   : 73
PLUS                 : 61
PROCEDURE            : 35
PROGRAM              : 1
RBRACKET             : 25
READ                 : 52
REAL                 : 22
RECORD               : 26
RPAREN               : 34 35 52 53 60 75
SEMICOLON            : 1 6 7 12 13 16 17 27 28 39 42 43 75
STRING               : 9
THEN                 : 56 57
TIMES                : 63
TO                   : 55
TRUE                 : 
TYPE                 : 10
VAR                  : 14
WHILE                : 54
WRITE                : 53
error                : 

Nonterminals, with rules where they appear

argumentos           : 75
atribuicao           : 45 55
bloco                : 1 40 54 55 56 57 57
bloco_rotina         : 34 35
campo                : 27 28
chamada_rotina       : 50
comando              : 42 43
condicional          : 49
const_valor          : 6 7 53
declaracoes          : 1 40
def_const            : 2
def_rotina           : 2 30
def_tipos            : 2
def_var              : 2
empty                : 3 5 11 15 31 37 44 77
escrita              : 47
exp                  : 51 55 60 61 61 62 62 63 63 64 64 65 65 80
exp_logica           : 54 56 57
function             : 32
leitura              : 46
lista_campos         : 26 27
lista_com            : 41 42
lista_const          : 4 6
lista_id             : 18 19 29 38 39
lista_param          : 76 78
lista_tipos          : 10 12
lista_var            : 14 16
operador_logico      : 65
param                : 36 39
parametro            : 78 79
parametros           : 34 35
procedure            : 33
program              : 0
repeticao            : 48
rotina               : 30
tipo                 : 12 13 18 25 29 34 38 39
var                  : 16 17

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declaracoes bloco

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declaracoes bloco

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declaracoes bloco

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declaracoes bloco
    (2) declaracoes -> . def_const def_tipos def_var def_rotina
    (3) declaracoes -> . empty
    (4) def_const -> . CONST lista_const
    (5) def_const -> . empty
    (74) empty -> .

    CONST           shift and go to state 8
    BEGIN           reduce using rule 74 (empty -> .)
    TYPE            reduce using rule 74 (empty -> .)
    VAR             reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    PROCEDURE       reduce using rule 74 (empty -> .)

    declaracoes                    shift and go to state 5
    def_const                      shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON declaracoes . bloco
    (41) bloco -> . BEGIN lista_com END

    BEGIN           shift and go to state 10

    bloco                          shift and go to state 9

state 6

    (2) declaracoes -> def_const . def_tipos def_var def_rotina
    (10) def_tipos -> . TYPE lista_tipos
    (11) def_tipos -> . empty
    (74) empty -> .

    TYPE            shift and go to state 12
    VAR             reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    PROCEDURE       reduce using rule 74 (empty -> .)
    BEGIN           reduce using rule 74 (empty -> .)

    def_tipos                      shift and go to state 11
    empty                          shift and go to state 13

state 7

    (3) declaracoes -> empty .
    (5) def_const -> empty .

  ! reduce/reduce conflict for BEGIN resolved using rule 3 (declaracoes -> empty .)
    BEGIN           reduce using rule 3 (declaracoes -> empty .)
    TYPE            reduce using rule 5 (def_const -> empty .)
    VAR             reduce using rule 5 (def_const -> empty .)
    FUNCTION        reduce using rule 5 (def_const -> empty .)
    PROCEDURE       reduce using rule 5 (def_const -> empty .)

  ! BEGIN           [ reduce using rule 5 (def_const -> empty .) ]


state 8

    (4) def_const -> CONST . lista_const
    (6) lista_const -> . ID EQUALS const_valor SEMICOLON lista_const
    (7) lista_const -> . ID EQUALS const_valor SEMICOLON

    ID              shift and go to state 15

    lista_const                    shift and go to state 14

state 9

    (1) program -> PROGRAM ID SEMICOLON declaracoes bloco .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declaracoes bloco .)


state 10

    (41) bloco -> BEGIN . lista_com END
    (42) lista_com -> . comando SEMICOLON lista_com
    (43) lista_com -> . comando SEMICOLON
    (44) lista_com -> . empty
    (45) comando -> . atribuicao
    (46) comando -> . leitura
    (47) comando -> . escrita
    (48) comando -> . repeticao
    (49) comando -> . condicional
    (50) comando -> . chamada_rotina
    (74) empty -> .
    (51) atribuicao -> . ID ASSIGN exp
    (52) leitura -> . READ LPAREN ID RPAREN
    (53) escrita -> . WRITE LPAREN const_valor RPAREN
    (54) repeticao -> . WHILE exp_logica DO bloco
    (55) repeticao -> . FOR atribuicao TO exp DO bloco
    (56) condicional -> . IF exp_logica THEN bloco
    (57) condicional -> . IF exp_logica THEN bloco ELSE bloco
    (75) chamada_rotina -> . ID LPAREN argumentos RPAREN SEMICOLON

    END             reduce using rule 74 (empty -> .)
    ID              shift and go to state 25
    READ            shift and go to state 26
    WRITE           shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    IF              shift and go to state 30

    lista_com                      shift and go to state 16
    comando                        shift and go to state 17
    empty                          shift and go to state 18
    atribuicao                     shift and go to state 19
    leitura                        shift and go to state 20
    escrita                        shift and go to state 21
    repeticao                      shift and go to state 22
    condicional                    shift and go to state 23
    chamada_rotina                 shift and go to state 24

state 11

    (2) declaracoes -> def_const def_tipos . def_var def_rotina
    (14) def_var -> . VAR lista_var
    (15) def_var -> . empty
    (74) empty -> .

    VAR             shift and go to state 32
    FUNCTION        reduce using rule 74 (empty -> .)
    PROCEDURE       reduce using rule 74 (empty -> .)
    BEGIN           reduce using rule 74 (empty -> .)

    def_var                        shift and go to state 31
    empty                          shift and go to state 33

state 12

    (10) def_tipos -> TYPE . lista_tipos
    (12) lista_tipos -> . ID EQUALS tipo SEMICOLON lista_tipos
    (13) lista_tipos -> . ID EQUALS tipo SEMICOLON

    ID              shift and go to state 35

    lista_tipos                    shift and go to state 34

state 13

    (11) def_tipos -> empty .

    VAR             reduce using rule 11 (def_tipos -> empty .)
    FUNCTION        reduce using rule 11 (def_tipos -> empty .)
    PROCEDURE       reduce using rule 11 (def_tipos -> empty .)
    BEGIN           reduce using rule 11 (def_tipos -> empty .)


state 14

    (4) def_const -> CONST lista_const .

    TYPE            reduce using rule 4 (def_const -> CONST lista_const .)
    VAR             reduce using rule 4 (def_const -> CONST lista_const .)
    FUNCTION        reduce using rule 4 (def_const -> CONST lista_const .)
    PROCEDURE       reduce using rule 4 (def_const -> CONST lista_const .)
    BEGIN           reduce using rule 4 (def_const -> CONST lista_const .)


state 15

    (6) lista_const -> ID . EQUALS const_valor SEMICOLON lista_const
    (7) lista_const -> ID . EQUALS const_valor SEMICOLON

    EQUALS          shift and go to state 36


state 16

    (41) bloco -> BEGIN lista_com . END

    END             shift and go to state 37


state 17

    (42) lista_com -> comando . SEMICOLON lista_com
    (43) lista_com -> comando . SEMICOLON

    SEMICOLON       shift and go to state 38


state 18

    (44) lista_com -> empty .

    END             reduce using rule 44 (lista_com -> empty .)


state 19

    (45) comando -> atribuicao .

    SEMICOLON       reduce using rule 45 (comando -> atribuicao .)


state 20

    (46) comando -> leitura .

    SEMICOLON       reduce using rule 46 (comando -> leitura .)


state 21

    (47) comando -> escrita .

    SEMICOLON       reduce using rule 47 (comando -> escrita .)


state 22

    (48) comando -> repeticao .

    SEMICOLON       reduce using rule 48 (comando -> repeticao .)


state 23

    (49) comando -> condicional .

    SEMICOLON       reduce using rule 49 (comando -> condicional .)


state 24

    (50) comando -> chamada_rotina .

    SEMICOLON       reduce using rule 50 (comando -> chamada_rotina .)


state 25

    (51) atribuicao -> ID . ASSIGN exp
    (75) chamada_rotina -> ID . LPAREN argumentos RPAREN SEMICOLON

    ASSIGN          shift and go to state 39
    LPAREN          shift and go to state 40


state 26

    (52) leitura -> READ . LPAREN ID RPAREN

    LPAREN          shift and go to state 41


state 27

    (53) escrita -> WRITE . LPAREN const_valor RPAREN

    LPAREN          shift and go to state 42


state 28

    (54) repeticao -> WHILE . exp_logica DO bloco
    (65) exp_logica -> . exp operador_logico exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp_logica                     shift and go to state 43
    exp                            shift and go to state 44

state 29

    (55) repeticao -> FOR . atribuicao TO exp DO bloco
    (51) atribuicao -> . ID ASSIGN exp

    ID              shift and go to state 49

    atribuicao                     shift and go to state 48

state 30

    (56) condicional -> IF . exp_logica THEN bloco
    (57) condicional -> IF . exp_logica THEN bloco ELSE bloco
    (65) exp_logica -> . exp operador_logico exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp_logica                     shift and go to state 50
    exp                            shift and go to state 44

state 31

    (2) declaracoes -> def_const def_tipos def_var . def_rotina
    (30) def_rotina -> . rotina def_rotina
    (31) def_rotina -> . empty
    (32) rotina -> . function
    (33) rotina -> . procedure
    (74) empty -> .
    (34) function -> . FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina
    (35) procedure -> . PROCEDURE ID LPAREN parametros RPAREN bloco_rotina

    BEGIN           reduce using rule 74 (empty -> .)
    FUNCTION        shift and go to state 56
    PROCEDURE       shift and go to state 57

    def_rotina                     shift and go to state 51
    rotina                         shift and go to state 52
    empty                          shift and go to state 53
    function                       shift and go to state 54
    procedure                      shift and go to state 55

state 32

    (14) def_var -> VAR . lista_var
    (16) lista_var -> . var SEMICOLON lista_var
    (17) lista_var -> . var SEMICOLON
    (18) var -> . lista_id COLON tipo
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    ID              shift and go to state 61

    lista_var                      shift and go to state 58
    var                            shift and go to state 59
    lista_id                       shift and go to state 60

state 33

    (15) def_var -> empty .

    FUNCTION        reduce using rule 15 (def_var -> empty .)
    PROCEDURE       reduce using rule 15 (def_var -> empty .)
    BEGIN           reduce using rule 15 (def_var -> empty .)


state 34

    (10) def_tipos -> TYPE lista_tipos .

    VAR             reduce using rule 10 (def_tipos -> TYPE lista_tipos .)
    FUNCTION        reduce using rule 10 (def_tipos -> TYPE lista_tipos .)
    PROCEDURE       reduce using rule 10 (def_tipos -> TYPE lista_tipos .)
    BEGIN           reduce using rule 10 (def_tipos -> TYPE lista_tipos .)


state 35

    (12) lista_tipos -> ID . EQUALS tipo SEMICOLON lista_tipos
    (13) lista_tipos -> ID . EQUALS tipo SEMICOLON

    EQUALS          shift and go to state 62


state 36

    (6) lista_const -> ID EQUALS . const_valor SEMICOLON lista_const
    (7) lista_const -> ID EQUALS . const_valor SEMICOLON
    (8) const_valor -> . NUMERO
    (9) const_valor -> . STRING

    NUMERO          shift and go to state 64
    STRING          shift and go to state 65

    const_valor                    shift and go to state 63

state 37

    (41) bloco -> BEGIN lista_com END .

    $end            reduce using rule 41 (bloco -> BEGIN lista_com END .)
    SEMICOLON       reduce using rule 41 (bloco -> BEGIN lista_com END .)
    ELSE            reduce using rule 41 (bloco -> BEGIN lista_com END .)
    FUNCTION        reduce using rule 41 (bloco -> BEGIN lista_com END .)
    PROCEDURE       reduce using rule 41 (bloco -> BEGIN lista_com END .)
    BEGIN           reduce using rule 41 (bloco -> BEGIN lista_com END .)


state 38

    (42) lista_com -> comando SEMICOLON . lista_com
    (43) lista_com -> comando SEMICOLON .
    (42) lista_com -> . comando SEMICOLON lista_com
    (43) lista_com -> . comando SEMICOLON
    (44) lista_com -> . empty
    (45) comando -> . atribuicao
    (46) comando -> . leitura
    (47) comando -> . escrita
    (48) comando -> . repeticao
    (49) comando -> . condicional
    (50) comando -> . chamada_rotina
    (74) empty -> .
    (51) atribuicao -> . ID ASSIGN exp
    (52) leitura -> . READ LPAREN ID RPAREN
    (53) escrita -> . WRITE LPAREN const_valor RPAREN
    (54) repeticao -> . WHILE exp_logica DO bloco
    (55) repeticao -> . FOR atribuicao TO exp DO bloco
    (56) condicional -> . IF exp_logica THEN bloco
    (57) condicional -> . IF exp_logica THEN bloco ELSE bloco
    (75) chamada_rotina -> . ID LPAREN argumentos RPAREN SEMICOLON

  ! reduce/reduce conflict for END resolved using rule 43 (lista_com -> comando SEMICOLON .)
    END             reduce using rule 43 (lista_com -> comando SEMICOLON .)
    ID              shift and go to state 25
    READ            shift and go to state 26
    WRITE           shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    IF              shift and go to state 30

  ! END             [ reduce using rule 74 (empty -> .) ]

    comando                        shift and go to state 17
    lista_com                      shift and go to state 66
    empty                          shift and go to state 18
    atribuicao                     shift and go to state 19
    leitura                        shift and go to state 20
    escrita                        shift and go to state 21
    repeticao                      shift and go to state 22
    condicional                    shift and go to state 23
    chamada_rotina                 shift and go to state 24

state 39

    (51) atribuicao -> ID ASSIGN . exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 67

state 40

    (75) chamada_rotina -> ID LPAREN . argumentos RPAREN SEMICOLON
    (76) argumentos -> . lista_param
    (77) argumentos -> . empty
    (78) lista_param -> . parametro COMMA lista_param
    (79) lista_param -> . parametro
    (74) empty -> .
    (80) parametro -> . exp
    (81) parametro -> . ID
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    RPAREN          reduce using rule 74 (empty -> .)
    ID              shift and go to state 68
    NUMERO          shift and go to state 45
    LPAREN          shift and go to state 47

    argumentos                     shift and go to state 69
    lista_param                    shift and go to state 70
    empty                          shift and go to state 71
    parametro                      shift and go to state 72
    exp                            shift and go to state 73

state 41

    (52) leitura -> READ LPAREN . ID RPAREN

    ID              shift and go to state 74


state 42

    (53) escrita -> WRITE LPAREN . const_valor RPAREN
    (8) const_valor -> . NUMERO
    (9) const_valor -> . STRING

    NUMERO          shift and go to state 64
    STRING          shift and go to state 65

    const_valor                    shift and go to state 75

state 43

    (54) repeticao -> WHILE exp_logica . DO bloco

    DO              shift and go to state 76


state 44

    (65) exp_logica -> exp . operador_logico exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp
    (66) operador_logico -> . EQUALS
    (67) operador_logico -> . NOT_EQUALS
    (68) operador_logico -> . LESS_THAN
    (69) operador_logico -> . GREATER_THAN
    (70) operador_logico -> . LESS_EQUAL
    (71) operador_logico -> . GREATER_EQUAL
    (72) operador_logico -> . AND
    (73) operador_logico -> . OR

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81
    EQUALS          shift and go to state 82
    NOT_EQUALS      shift and go to state 83
    LESS_THAN       shift and go to state 84
    GREATER_THAN    shift and go to state 85
    LESS_EQUAL      shift and go to state 86
    GREATER_EQUAL   shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

    operador_logico                shift and go to state 77

state 45

    (58) exp -> NUMERO .

    PLUS            reduce using rule 58 (exp -> NUMERO .)
    MINUS           reduce using rule 58 (exp -> NUMERO .)
    TIMES           reduce using rule 58 (exp -> NUMERO .)
    DIVIDE          reduce using rule 58 (exp -> NUMERO .)
    EQUALS          reduce using rule 58 (exp -> NUMERO .)
    NOT_EQUALS      reduce using rule 58 (exp -> NUMERO .)
    LESS_THAN       reduce using rule 58 (exp -> NUMERO .)
    GREATER_THAN    reduce using rule 58 (exp -> NUMERO .)
    LESS_EQUAL      reduce using rule 58 (exp -> NUMERO .)
    GREATER_EQUAL   reduce using rule 58 (exp -> NUMERO .)
    AND             reduce using rule 58 (exp -> NUMERO .)
    OR              reduce using rule 58 (exp -> NUMERO .)
    SEMICOLON       reduce using rule 58 (exp -> NUMERO .)
    TO              reduce using rule 58 (exp -> NUMERO .)
    COMMA           reduce using rule 58 (exp -> NUMERO .)
    RPAREN          reduce using rule 58 (exp -> NUMERO .)
    DO              reduce using rule 58 (exp -> NUMERO .)
    THEN            reduce using rule 58 (exp -> NUMERO .)


state 46

    (59) exp -> ID .

    PLUS            reduce using rule 59 (exp -> ID .)
    MINUS           reduce using rule 59 (exp -> ID .)
    TIMES           reduce using rule 59 (exp -> ID .)
    DIVIDE          reduce using rule 59 (exp -> ID .)
    EQUALS          reduce using rule 59 (exp -> ID .)
    NOT_EQUALS      reduce using rule 59 (exp -> ID .)
    LESS_THAN       reduce using rule 59 (exp -> ID .)
    GREATER_THAN    reduce using rule 59 (exp -> ID .)
    LESS_EQUAL      reduce using rule 59 (exp -> ID .)
    GREATER_EQUAL   reduce using rule 59 (exp -> ID .)
    AND             reduce using rule 59 (exp -> ID .)
    OR              reduce using rule 59 (exp -> ID .)
    SEMICOLON       reduce using rule 59 (exp -> ID .)
    TO              reduce using rule 59 (exp -> ID .)
    RPAREN          reduce using rule 59 (exp -> ID .)
    DO              reduce using rule 59 (exp -> ID .)
    THEN            reduce using rule 59 (exp -> ID .)
    COMMA           reduce using rule 59 (exp -> ID .)


state 47

    (60) exp -> LPAREN . exp RPAREN
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 90

state 48

    (55) repeticao -> FOR atribuicao . TO exp DO bloco

    TO              shift and go to state 91


state 49

    (51) atribuicao -> ID . ASSIGN exp

    ASSIGN          shift and go to state 39


state 50

    (56) condicional -> IF exp_logica . THEN bloco
    (57) condicional -> IF exp_logica . THEN bloco ELSE bloco

    THEN            shift and go to state 92


state 51

    (2) declaracoes -> def_const def_tipos def_var def_rotina .

    BEGIN           reduce using rule 2 (declaracoes -> def_const def_tipos def_var def_rotina .)


state 52

    (30) def_rotina -> rotina . def_rotina
    (30) def_rotina -> . rotina def_rotina
    (31) def_rotina -> . empty
    (32) rotina -> . function
    (33) rotina -> . procedure
    (74) empty -> .
    (34) function -> . FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina
    (35) procedure -> . PROCEDURE ID LPAREN parametros RPAREN bloco_rotina

    BEGIN           reduce using rule 74 (empty -> .)
    FUNCTION        shift and go to state 56
    PROCEDURE       shift and go to state 57

    rotina                         shift and go to state 52
    def_rotina                     shift and go to state 93
    empty                          shift and go to state 53
    function                       shift and go to state 54
    procedure                      shift and go to state 55

state 53

    (31) def_rotina -> empty .

    BEGIN           reduce using rule 31 (def_rotina -> empty .)


state 54

    (32) rotina -> function .

    FUNCTION        reduce using rule 32 (rotina -> function .)
    PROCEDURE       reduce using rule 32 (rotina -> function .)
    BEGIN           reduce using rule 32 (rotina -> function .)


state 55

    (33) rotina -> procedure .

    FUNCTION        reduce using rule 33 (rotina -> procedure .)
    PROCEDURE       reduce using rule 33 (rotina -> procedure .)
    BEGIN           reduce using rule 33 (rotina -> procedure .)


state 56

    (34) function -> FUNCTION . ID LPAREN parametros RPAREN COLON tipo bloco_rotina

    ID              shift and go to state 94


state 57

    (35) procedure -> PROCEDURE . ID LPAREN parametros RPAREN bloco_rotina

    ID              shift and go to state 95


state 58

    (14) def_var -> VAR lista_var .

    FUNCTION        reduce using rule 14 (def_var -> VAR lista_var .)
    PROCEDURE       reduce using rule 14 (def_var -> VAR lista_var .)
    BEGIN           reduce using rule 14 (def_var -> VAR lista_var .)


state 59

    (16) lista_var -> var . SEMICOLON lista_var
    (17) lista_var -> var . SEMICOLON

    SEMICOLON       shift and go to state 96


state 60

    (18) var -> lista_id . COLON tipo

    COLON           shift and go to state 97


state 61

    (19) lista_id -> ID . COMMA lista_id
    (20) lista_id -> ID .

    COMMA           shift and go to state 98
    COLON           reduce using rule 20 (lista_id -> ID .)


state 62

    (12) lista_tipos -> ID EQUALS . tipo SEMICOLON lista_tipos
    (13) lista_tipos -> ID EQUALS . tipo SEMICOLON
    (21) tipo -> . INTEGER
    (22) tipo -> . REAL
    (23) tipo -> . CHAR
    (24) tipo -> . BOOLEAN
    (25) tipo -> . ARRAY LBRACKET NUMERO RBRACKET OF tipo
    (26) tipo -> . RECORD lista_campos END

    INTEGER         shift and go to state 100
    REAL            shift and go to state 101
    CHAR            shift and go to state 102
    BOOLEAN         shift and go to state 103
    ARRAY           shift and go to state 104
    RECORD          shift and go to state 105

    tipo                           shift and go to state 99

state 63

    (6) lista_const -> ID EQUALS const_valor . SEMICOLON lista_const
    (7) lista_const -> ID EQUALS const_valor . SEMICOLON

    SEMICOLON       shift and go to state 106


state 64

    (8) const_valor -> NUMERO .

    SEMICOLON       reduce using rule 8 (const_valor -> NUMERO .)
    RPAREN          reduce using rule 8 (const_valor -> NUMERO .)


state 65

    (9) const_valor -> STRING .

    SEMICOLON       reduce using rule 9 (const_valor -> STRING .)
    RPAREN          reduce using rule 9 (const_valor -> STRING .)


state 66

    (42) lista_com -> comando SEMICOLON lista_com .

    END             reduce using rule 42 (lista_com -> comando SEMICOLON lista_com .)


state 67

    (51) atribuicao -> ID ASSIGN exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

    SEMICOLON       reduce using rule 51 (atribuicao -> ID ASSIGN exp .)
    TO              reduce using rule 51 (atribuicao -> ID ASSIGN exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81


state 68

    (81) parametro -> ID .
    (59) exp -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 59 (exp -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 59 (exp -> ID .)
    PLUS            reduce using rule 59 (exp -> ID .)
    MINUS           reduce using rule 59 (exp -> ID .)
    TIMES           reduce using rule 59 (exp -> ID .)
    DIVIDE          reduce using rule 59 (exp -> ID .)
    COMMA           reduce using rule 59 (exp -> ID .)
    RPAREN          reduce using rule 59 (exp -> ID .)

  ! COMMA           [ reduce using rule 81 (parametro -> ID .) ]
  ! RPAREN          [ reduce using rule 81 (parametro -> ID .) ]


state 69

    (75) chamada_rotina -> ID LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 107


state 70

    (76) argumentos -> lista_param .

    RPAREN          reduce using rule 76 (argumentos -> lista_param .)


state 71

    (77) argumentos -> empty .

    RPAREN          reduce using rule 77 (argumentos -> empty .)


state 72

    (78) lista_param -> parametro . COMMA lista_param
    (79) lista_param -> parametro .

    COMMA           shift and go to state 108
    RPAREN          reduce using rule 79 (lista_param -> parametro .)


state 73

    (80) parametro -> exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

    COMMA           reduce using rule 80 (parametro -> exp .)
    RPAREN          reduce using rule 80 (parametro -> exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81


state 74

    (52) leitura -> READ LPAREN ID . RPAREN

    RPAREN          shift and go to state 109


state 75

    (53) escrita -> WRITE LPAREN const_valor . RPAREN

    RPAREN          shift and go to state 110


state 76

    (54) repeticao -> WHILE exp_logica DO . bloco
    (41) bloco -> . BEGIN lista_com END

    BEGIN           shift and go to state 10

    bloco                          shift and go to state 111

state 77

    (65) exp_logica -> exp operador_logico . exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 112

state 78

    (61) exp -> exp PLUS . exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 113

state 79

    (62) exp -> exp MINUS . exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 114

state 80

    (63) exp -> exp TIMES . exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 115

state 81

    (64) exp -> exp DIVIDE . exp
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 116

state 82

    (66) operador_logico -> EQUALS .

    NUMERO          reduce using rule 66 (operador_logico -> EQUALS .)
    ID              reduce using rule 66 (operador_logico -> EQUALS .)
    LPAREN          reduce using rule 66 (operador_logico -> EQUALS .)


state 83

    (67) operador_logico -> NOT_EQUALS .

    NUMERO          reduce using rule 67 (operador_logico -> NOT_EQUALS .)
    ID              reduce using rule 67 (operador_logico -> NOT_EQUALS .)
    LPAREN          reduce using rule 67 (operador_logico -> NOT_EQUALS .)


state 84

    (68) operador_logico -> LESS_THAN .

    NUMERO          reduce using rule 68 (operador_logico -> LESS_THAN .)
    ID              reduce using rule 68 (operador_logico -> LESS_THAN .)
    LPAREN          reduce using rule 68 (operador_logico -> LESS_THAN .)


state 85

    (69) operador_logico -> GREATER_THAN .

    NUMERO          reduce using rule 69 (operador_logico -> GREATER_THAN .)
    ID              reduce using rule 69 (operador_logico -> GREATER_THAN .)
    LPAREN          reduce using rule 69 (operador_logico -> GREATER_THAN .)


state 86

    (70) operador_logico -> LESS_EQUAL .

    NUMERO          reduce using rule 70 (operador_logico -> LESS_EQUAL .)
    ID              reduce using rule 70 (operador_logico -> LESS_EQUAL .)
    LPAREN          reduce using rule 70 (operador_logico -> LESS_EQUAL .)


state 87

    (71) operador_logico -> GREATER_EQUAL .

    NUMERO          reduce using rule 71 (operador_logico -> GREATER_EQUAL .)
    ID              reduce using rule 71 (operador_logico -> GREATER_EQUAL .)
    LPAREN          reduce using rule 71 (operador_logico -> GREATER_EQUAL .)


state 88

    (72) operador_logico -> AND .

    NUMERO          reduce using rule 72 (operador_logico -> AND .)
    ID              reduce using rule 72 (operador_logico -> AND .)
    LPAREN          reduce using rule 72 (operador_logico -> AND .)


state 89

    (73) operador_logico -> OR .

    NUMERO          reduce using rule 73 (operador_logico -> OR .)
    ID              reduce using rule 73 (operador_logico -> OR .)
    LPAREN          reduce using rule 73 (operador_logico -> OR .)


state 90

    (60) exp -> LPAREN exp . RPAREN
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81


state 91

    (55) repeticao -> FOR atribuicao TO . exp DO bloco
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    NUMERO          shift and go to state 45
    ID              shift and go to state 46
    LPAREN          shift and go to state 47

    exp                            shift and go to state 118

state 92

    (56) condicional -> IF exp_logica THEN . bloco
    (57) condicional -> IF exp_logica THEN . bloco ELSE bloco
    (41) bloco -> . BEGIN lista_com END

    BEGIN           shift and go to state 10

    bloco                          shift and go to state 119

state 93

    (30) def_rotina -> rotina def_rotina .

    BEGIN           reduce using rule 30 (def_rotina -> rotina def_rotina .)


state 94

    (34) function -> FUNCTION ID . LPAREN parametros RPAREN COLON tipo bloco_rotina

    LPAREN          shift and go to state 120


state 95

    (35) procedure -> PROCEDURE ID . LPAREN parametros RPAREN bloco_rotina

    LPAREN          shift and go to state 121


state 96

    (16) lista_var -> var SEMICOLON . lista_var
    (17) lista_var -> var SEMICOLON .
    (16) lista_var -> . var SEMICOLON lista_var
    (17) lista_var -> . var SEMICOLON
    (18) var -> . lista_id COLON tipo
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    FUNCTION        reduce using rule 17 (lista_var -> var SEMICOLON .)
    PROCEDURE       reduce using rule 17 (lista_var -> var SEMICOLON .)
    BEGIN           reduce using rule 17 (lista_var -> var SEMICOLON .)
    ID              shift and go to state 61

    var                            shift and go to state 59
    lista_var                      shift and go to state 122
    lista_id                       shift and go to state 60

state 97

    (18) var -> lista_id COLON . tipo
    (21) tipo -> . INTEGER
    (22) tipo -> . REAL
    (23) tipo -> . CHAR
    (24) tipo -> . BOOLEAN
    (25) tipo -> . ARRAY LBRACKET NUMERO RBRACKET OF tipo
    (26) tipo -> . RECORD lista_campos END

    INTEGER         shift and go to state 100
    REAL            shift and go to state 101
    CHAR            shift and go to state 102
    BOOLEAN         shift and go to state 103
    ARRAY           shift and go to state 104
    RECORD          shift and go to state 105

    tipo                           shift and go to state 123

state 98

    (19) lista_id -> ID COMMA . lista_id
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    ID              shift and go to state 61

    lista_id                       shift and go to state 124

state 99

    (12) lista_tipos -> ID EQUALS tipo . SEMICOLON lista_tipos
    (13) lista_tipos -> ID EQUALS tipo . SEMICOLON

    SEMICOLON       shift and go to state 125


state 100

    (21) tipo -> INTEGER .

    SEMICOLON       reduce using rule 21 (tipo -> INTEGER .)
    RPAREN          reduce using rule 21 (tipo -> INTEGER .)
    CONST           reduce using rule 21 (tipo -> INTEGER .)
    BEGIN           reduce using rule 21 (tipo -> INTEGER .)
    TYPE            reduce using rule 21 (tipo -> INTEGER .)
    VAR             reduce using rule 21 (tipo -> INTEGER .)
    FUNCTION        reduce using rule 21 (tipo -> INTEGER .)
    PROCEDURE       reduce using rule 21 (tipo -> INTEGER .)


state 101

    (22) tipo -> REAL .

    SEMICOLON       reduce using rule 22 (tipo -> REAL .)
    RPAREN          reduce using rule 22 (tipo -> REAL .)
    CONST           reduce using rule 22 (tipo -> REAL .)
    BEGIN           reduce using rule 22 (tipo -> REAL .)
    TYPE            reduce using rule 22 (tipo -> REAL .)
    VAR             reduce using rule 22 (tipo -> REAL .)
    FUNCTION        reduce using rule 22 (tipo -> REAL .)
    PROCEDURE       reduce using rule 22 (tipo -> REAL .)


state 102

    (23) tipo -> CHAR .

    SEMICOLON       reduce using rule 23 (tipo -> CHAR .)
    RPAREN          reduce using rule 23 (tipo -> CHAR .)
    CONST           reduce using rule 23 (tipo -> CHAR .)
    BEGIN           reduce using rule 23 (tipo -> CHAR .)
    TYPE            reduce using rule 23 (tipo -> CHAR .)
    VAR             reduce using rule 23 (tipo -> CHAR .)
    FUNCTION        reduce using rule 23 (tipo -> CHAR .)
    PROCEDURE       reduce using rule 23 (tipo -> CHAR .)


state 103

    (24) tipo -> BOOLEAN .

    SEMICOLON       reduce using rule 24 (tipo -> BOOLEAN .)
    RPAREN          reduce using rule 24 (tipo -> BOOLEAN .)
    CONST           reduce using rule 24 (tipo -> BOOLEAN .)
    BEGIN           reduce using rule 24 (tipo -> BOOLEAN .)
    TYPE            reduce using rule 24 (tipo -> BOOLEAN .)
    VAR             reduce using rule 24 (tipo -> BOOLEAN .)
    FUNCTION        reduce using rule 24 (tipo -> BOOLEAN .)
    PROCEDURE       reduce using rule 24 (tipo -> BOOLEAN .)


state 104

    (25) tipo -> ARRAY . LBRACKET NUMERO RBRACKET OF tipo

    LBRACKET        shift and go to state 126


state 105

    (26) tipo -> RECORD . lista_campos END
    (27) lista_campos -> . campo SEMICOLON lista_campos
    (28) lista_campos -> . campo SEMICOLON
    (29) campo -> . lista_id COLON tipo
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    ID              shift and go to state 61

    lista_campos                   shift and go to state 127
    campo                          shift and go to state 128
    lista_id                       shift and go to state 129

state 106

    (6) lista_const -> ID EQUALS const_valor SEMICOLON . lista_const
    (7) lista_const -> ID EQUALS const_valor SEMICOLON .
    (6) lista_const -> . ID EQUALS const_valor SEMICOLON lista_const
    (7) lista_const -> . ID EQUALS const_valor SEMICOLON

    TYPE            reduce using rule 7 (lista_const -> ID EQUALS const_valor SEMICOLON .)
    VAR             reduce using rule 7 (lista_const -> ID EQUALS const_valor SEMICOLON .)
    FUNCTION        reduce using rule 7 (lista_const -> ID EQUALS const_valor SEMICOLON .)
    PROCEDURE       reduce using rule 7 (lista_const -> ID EQUALS const_valor SEMICOLON .)
    BEGIN           reduce using rule 7 (lista_const -> ID EQUALS const_valor SEMICOLON .)
    ID              shift and go to state 15

    lista_const                    shift and go to state 130

state 107

    (75) chamada_rotina -> ID LPAREN argumentos RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 131


state 108

    (78) lista_param -> parametro COMMA . lista_param
    (78) lista_param -> . parametro COMMA lista_param
    (79) lista_param -> . parametro
    (80) parametro -> . exp
    (81) parametro -> . ID
    (58) exp -> . NUMERO
    (59) exp -> . ID
    (60) exp -> . LPAREN exp RPAREN
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp TIMES exp
    (64) exp -> . exp DIVIDE exp

    ID              shift and go to state 68
    NUMERO          shift and go to state 45
    LPAREN          shift and go to state 47

    parametro                      shift and go to state 72
    lista_param                    shift and go to state 132
    exp                            shift and go to state 73

state 109

    (52) leitura -> READ LPAREN ID RPAREN .

    SEMICOLON       reduce using rule 52 (leitura -> READ LPAREN ID RPAREN .)


state 110

    (53) escrita -> WRITE LPAREN const_valor RPAREN .

    SEMICOLON       reduce using rule 53 (escrita -> WRITE LPAREN const_valor RPAREN .)


state 111

    (54) repeticao -> WHILE exp_logica DO bloco .

    SEMICOLON       reduce using rule 54 (repeticao -> WHILE exp_logica DO bloco .)


state 112

    (65) exp_logica -> exp operador_logico exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

    DO              reduce using rule 65 (exp_logica -> exp operador_logico exp .)
    THEN            reduce using rule 65 (exp_logica -> exp operador_logico exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81


state 113

    (61) exp -> exp PLUS exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    EQUALS          reduce using rule 61 (exp -> exp PLUS exp .)
    NOT_EQUALS      reduce using rule 61 (exp -> exp PLUS exp .)
    LESS_THAN       reduce using rule 61 (exp -> exp PLUS exp .)
    GREATER_THAN    reduce using rule 61 (exp -> exp PLUS exp .)
    LESS_EQUAL      reduce using rule 61 (exp -> exp PLUS exp .)
    GREATER_EQUAL   reduce using rule 61 (exp -> exp PLUS exp .)
    AND             reduce using rule 61 (exp -> exp PLUS exp .)
    OR              reduce using rule 61 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp PLUS exp .)
    TO              reduce using rule 61 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 61 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 61 (exp -> exp PLUS exp .)
    DO              reduce using rule 61 (exp -> exp PLUS exp .)
    THEN            reduce using rule 61 (exp -> exp PLUS exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81

  ! PLUS            [ reduce using rule 61 (exp -> exp PLUS exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp PLUS exp .) ]
  ! TIMES           [ reduce using rule 61 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp PLUS exp .) ]


state 114

    (62) exp -> exp MINUS exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    EQUALS          reduce using rule 62 (exp -> exp MINUS exp .)
    NOT_EQUALS      reduce using rule 62 (exp -> exp MINUS exp .)
    LESS_THAN       reduce using rule 62 (exp -> exp MINUS exp .)
    GREATER_THAN    reduce using rule 62 (exp -> exp MINUS exp .)
    LESS_EQUAL      reduce using rule 62 (exp -> exp MINUS exp .)
    GREATER_EQUAL   reduce using rule 62 (exp -> exp MINUS exp .)
    AND             reduce using rule 62 (exp -> exp MINUS exp .)
    OR              reduce using rule 62 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 62 (exp -> exp MINUS exp .)
    TO              reduce using rule 62 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 62 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 62 (exp -> exp MINUS exp .)
    DO              reduce using rule 62 (exp -> exp MINUS exp .)
    THEN            reduce using rule 62 (exp -> exp MINUS exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81

  ! PLUS            [ reduce using rule 62 (exp -> exp MINUS exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp MINUS exp .) ]
  ! TIMES           [ reduce using rule 62 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> exp MINUS exp .) ]


state 115

    (63) exp -> exp TIMES exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    EQUALS          reduce using rule 63 (exp -> exp TIMES exp .)
    NOT_EQUALS      reduce using rule 63 (exp -> exp TIMES exp .)
    LESS_THAN       reduce using rule 63 (exp -> exp TIMES exp .)
    GREATER_THAN    reduce using rule 63 (exp -> exp TIMES exp .)
    LESS_EQUAL      reduce using rule 63 (exp -> exp TIMES exp .)
    GREATER_EQUAL   reduce using rule 63 (exp -> exp TIMES exp .)
    AND             reduce using rule 63 (exp -> exp TIMES exp .)
    OR              reduce using rule 63 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 63 (exp -> exp TIMES exp .)
    TO              reduce using rule 63 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 63 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 63 (exp -> exp TIMES exp .)
    DO              reduce using rule 63 (exp -> exp TIMES exp .)
    THEN            reduce using rule 63 (exp -> exp TIMES exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81

  ! PLUS            [ reduce using rule 63 (exp -> exp TIMES exp .) ]
  ! MINUS           [ reduce using rule 63 (exp -> exp TIMES exp .) ]
  ! TIMES           [ reduce using rule 63 (exp -> exp TIMES exp .) ]
  ! DIVIDE          [ reduce using rule 63 (exp -> exp TIMES exp .) ]


state 116

    (64) exp -> exp DIVIDE exp .
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    EQUALS          reduce using rule 64 (exp -> exp DIVIDE exp .)
    NOT_EQUALS      reduce using rule 64 (exp -> exp DIVIDE exp .)
    LESS_THAN       reduce using rule 64 (exp -> exp DIVIDE exp .)
    GREATER_THAN    reduce using rule 64 (exp -> exp DIVIDE exp .)
    LESS_EQUAL      reduce using rule 64 (exp -> exp DIVIDE exp .)
    GREATER_EQUAL   reduce using rule 64 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 64 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 64 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 64 (exp -> exp DIVIDE exp .)
    TO              reduce using rule 64 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 64 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 64 (exp -> exp DIVIDE exp .)
    DO              reduce using rule 64 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 64 (exp -> exp DIVIDE exp .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81

  ! PLUS            [ reduce using rule 64 (exp -> exp DIVIDE exp .) ]
  ! MINUS           [ reduce using rule 64 (exp -> exp DIVIDE exp .) ]
  ! TIMES           [ reduce using rule 64 (exp -> exp DIVIDE exp .) ]
  ! DIVIDE          [ reduce using rule 64 (exp -> exp DIVIDE exp .) ]


state 117

    (60) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    NOT_EQUALS      reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    LESS_THAN       reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    GREATER_THAN    reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    TO              reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    DO              reduce using rule 60 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 60 (exp -> LPAREN exp RPAREN .)


state 118

    (55) repeticao -> FOR atribuicao TO exp . DO bloco
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . TIMES exp
    (64) exp -> exp . DIVIDE exp

    DO              shift and go to state 133
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 81


state 119

    (56) condicional -> IF exp_logica THEN bloco .
    (57) condicional -> IF exp_logica THEN bloco . ELSE bloco

    SEMICOLON       reduce using rule 56 (condicional -> IF exp_logica THEN bloco .)
    ELSE            shift and go to state 134


state 120

    (34) function -> FUNCTION ID LPAREN . parametros RPAREN COLON tipo bloco_rotina
    (36) parametros -> . param
    (37) parametros -> . empty
    (38) param -> . lista_id COLON tipo
    (39) param -> . lista_id COLON tipo SEMICOLON param
    (74) empty -> .
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    RPAREN          reduce using rule 74 (empty -> .)
    ID              shift and go to state 61

    parametros                     shift and go to state 135
    param                          shift and go to state 136
    empty                          shift and go to state 137
    lista_id                       shift and go to state 138

state 121

    (35) procedure -> PROCEDURE ID LPAREN . parametros RPAREN bloco_rotina
    (36) parametros -> . param
    (37) parametros -> . empty
    (38) param -> . lista_id COLON tipo
    (39) param -> . lista_id COLON tipo SEMICOLON param
    (74) empty -> .
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    RPAREN          reduce using rule 74 (empty -> .)
    ID              shift and go to state 61

    parametros                     shift and go to state 139
    param                          shift and go to state 136
    empty                          shift and go to state 137
    lista_id                       shift and go to state 138

state 122

    (16) lista_var -> var SEMICOLON lista_var .

    FUNCTION        reduce using rule 16 (lista_var -> var SEMICOLON lista_var .)
    PROCEDURE       reduce using rule 16 (lista_var -> var SEMICOLON lista_var .)
    BEGIN           reduce using rule 16 (lista_var -> var SEMICOLON lista_var .)


state 123

    (18) var -> lista_id COLON tipo .

    SEMICOLON       reduce using rule 18 (var -> lista_id COLON tipo .)


state 124

    (19) lista_id -> ID COMMA lista_id .

    COLON           reduce using rule 19 (lista_id -> ID COMMA lista_id .)


state 125

    (12) lista_tipos -> ID EQUALS tipo SEMICOLON . lista_tipos
    (13) lista_tipos -> ID EQUALS tipo SEMICOLON .
    (12) lista_tipos -> . ID EQUALS tipo SEMICOLON lista_tipos
    (13) lista_tipos -> . ID EQUALS tipo SEMICOLON

    VAR             reduce using rule 13 (lista_tipos -> ID EQUALS tipo SEMICOLON .)
    FUNCTION        reduce using rule 13 (lista_tipos -> ID EQUALS tipo SEMICOLON .)
    PROCEDURE       reduce using rule 13 (lista_tipos -> ID EQUALS tipo SEMICOLON .)
    BEGIN           reduce using rule 13 (lista_tipos -> ID EQUALS tipo SEMICOLON .)
    ID              shift and go to state 35

    lista_tipos                    shift and go to state 140

state 126

    (25) tipo -> ARRAY LBRACKET . NUMERO RBRACKET OF tipo

    NUMERO          shift and go to state 141


state 127

    (26) tipo -> RECORD lista_campos . END

    END             shift and go to state 142


state 128

    (27) lista_campos -> campo . SEMICOLON lista_campos
    (28) lista_campos -> campo . SEMICOLON

    SEMICOLON       shift and go to state 143


state 129

    (29) campo -> lista_id . COLON tipo

    COLON           shift and go to state 144


state 130

    (6) lista_const -> ID EQUALS const_valor SEMICOLON lista_const .

    TYPE            reduce using rule 6 (lista_const -> ID EQUALS const_valor SEMICOLON lista_const .)
    VAR             reduce using rule 6 (lista_const -> ID EQUALS const_valor SEMICOLON lista_const .)
    FUNCTION        reduce using rule 6 (lista_const -> ID EQUALS const_valor SEMICOLON lista_const .)
    PROCEDURE       reduce using rule 6 (lista_const -> ID EQUALS const_valor SEMICOLON lista_const .)
    BEGIN           reduce using rule 6 (lista_const -> ID EQUALS const_valor SEMICOLON lista_const .)


state 131

    (75) chamada_rotina -> ID LPAREN argumentos RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 75 (chamada_rotina -> ID LPAREN argumentos RPAREN SEMICOLON .)


state 132

    (78) lista_param -> parametro COMMA lista_param .

    RPAREN          reduce using rule 78 (lista_param -> parametro COMMA lista_param .)


state 133

    (55) repeticao -> FOR atribuicao TO exp DO . bloco
    (41) bloco -> . BEGIN lista_com END

    BEGIN           shift and go to state 10

    bloco                          shift and go to state 145

state 134

    (57) condicional -> IF exp_logica THEN bloco ELSE . bloco
    (41) bloco -> . BEGIN lista_com END

    BEGIN           shift and go to state 10

    bloco                          shift and go to state 146

state 135

    (34) function -> FUNCTION ID LPAREN parametros . RPAREN COLON tipo bloco_rotina

    RPAREN          shift and go to state 147


state 136

    (36) parametros -> param .

    RPAREN          reduce using rule 36 (parametros -> param .)


state 137

    (37) parametros -> empty .

    RPAREN          reduce using rule 37 (parametros -> empty .)


state 138

    (38) param -> lista_id . COLON tipo
    (39) param -> lista_id . COLON tipo SEMICOLON param

    COLON           shift and go to state 148


state 139

    (35) procedure -> PROCEDURE ID LPAREN parametros . RPAREN bloco_rotina

    RPAREN          shift and go to state 149


state 140

    (12) lista_tipos -> ID EQUALS tipo SEMICOLON lista_tipos .

    VAR             reduce using rule 12 (lista_tipos -> ID EQUALS tipo SEMICOLON lista_tipos .)
    FUNCTION        reduce using rule 12 (lista_tipos -> ID EQUALS tipo SEMICOLON lista_tipos .)
    PROCEDURE       reduce using rule 12 (lista_tipos -> ID EQUALS tipo SEMICOLON lista_tipos .)
    BEGIN           reduce using rule 12 (lista_tipos -> ID EQUALS tipo SEMICOLON lista_tipos .)


state 141

    (25) tipo -> ARRAY LBRACKET NUMERO . RBRACKET OF tipo

    RBRACKET        shift and go to state 150


state 142

    (26) tipo -> RECORD lista_campos END .

    SEMICOLON       reduce using rule 26 (tipo -> RECORD lista_campos END .)
    RPAREN          reduce using rule 26 (tipo -> RECORD lista_campos END .)
    CONST           reduce using rule 26 (tipo -> RECORD lista_campos END .)
    BEGIN           reduce using rule 26 (tipo -> RECORD lista_campos END .)
    TYPE            reduce using rule 26 (tipo -> RECORD lista_campos END .)
    VAR             reduce using rule 26 (tipo -> RECORD lista_campos END .)
    FUNCTION        reduce using rule 26 (tipo -> RECORD lista_campos END .)
    PROCEDURE       reduce using rule 26 (tipo -> RECORD lista_campos END .)


state 143

    (27) lista_campos -> campo SEMICOLON . lista_campos
    (28) lista_campos -> campo SEMICOLON .
    (27) lista_campos -> . campo SEMICOLON lista_campos
    (28) lista_campos -> . campo SEMICOLON
    (29) campo -> . lista_id COLON tipo
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    END             reduce using rule 28 (lista_campos -> campo SEMICOLON .)
    ID              shift and go to state 61

    campo                          shift and go to state 128
    lista_campos                   shift and go to state 151
    lista_id                       shift and go to state 129

state 144

    (29) campo -> lista_id COLON . tipo
    (21) tipo -> . INTEGER
    (22) tipo -> . REAL
    (23) tipo -> . CHAR
    (24) tipo -> . BOOLEAN
    (25) tipo -> . ARRAY LBRACKET NUMERO RBRACKET OF tipo
    (26) tipo -> . RECORD lista_campos END

    INTEGER         shift and go to state 100
    REAL            shift and go to state 101
    CHAR            shift and go to state 102
    BOOLEAN         shift and go to state 103
    ARRAY           shift and go to state 104
    RECORD          shift and go to state 105

    tipo                           shift and go to state 152

state 145

    (55) repeticao -> FOR atribuicao TO exp DO bloco .

    SEMICOLON       reduce using rule 55 (repeticao -> FOR atribuicao TO exp DO bloco .)


state 146

    (57) condicional -> IF exp_logica THEN bloco ELSE bloco .

    SEMICOLON       reduce using rule 57 (condicional -> IF exp_logica THEN bloco ELSE bloco .)


state 147

    (34) function -> FUNCTION ID LPAREN parametros RPAREN . COLON tipo bloco_rotina

    COLON           shift and go to state 153


state 148

    (38) param -> lista_id COLON . tipo
    (39) param -> lista_id COLON . tipo SEMICOLON param
    (21) tipo -> . INTEGER
    (22) tipo -> . REAL
    (23) tipo -> . CHAR
    (24) tipo -> . BOOLEAN
    (25) tipo -> . ARRAY LBRACKET NUMERO RBRACKET OF tipo
    (26) tipo -> . RECORD lista_campos END

    INTEGER         shift and go to state 100
    REAL            shift and go to state 101
    CHAR            shift and go to state 102
    BOOLEAN         shift and go to state 103
    ARRAY           shift and go to state 104
    RECORD          shift and go to state 105

    tipo                           shift and go to state 154

state 149

    (35) procedure -> PROCEDURE ID LPAREN parametros RPAREN . bloco_rotina
    (40) bloco_rotina -> . declaracoes bloco
    (2) declaracoes -> . def_const def_tipos def_var def_rotina
    (3) declaracoes -> . empty
    (4) def_const -> . CONST lista_const
    (5) def_const -> . empty
    (74) empty -> .

    CONST           shift and go to state 8
    BEGIN           reduce using rule 74 (empty -> .)
    TYPE            reduce using rule 74 (empty -> .)
    VAR             reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    PROCEDURE       reduce using rule 74 (empty -> .)

    bloco_rotina                   shift and go to state 155
    declaracoes                    shift and go to state 156
    def_const                      shift and go to state 6
    empty                          shift and go to state 7

state 150

    (25) tipo -> ARRAY LBRACKET NUMERO RBRACKET . OF tipo

    OF              shift and go to state 157


state 151

    (27) lista_campos -> campo SEMICOLON lista_campos .

    END             reduce using rule 27 (lista_campos -> campo SEMICOLON lista_campos .)


state 152

    (29) campo -> lista_id COLON tipo .

    SEMICOLON       reduce using rule 29 (campo -> lista_id COLON tipo .)


state 153

    (34) function -> FUNCTION ID LPAREN parametros RPAREN COLON . tipo bloco_rotina
    (21) tipo -> . INTEGER
    (22) tipo -> . REAL
    (23) tipo -> . CHAR
    (24) tipo -> . BOOLEAN
    (25) tipo -> . ARRAY LBRACKET NUMERO RBRACKET OF tipo
    (26) tipo -> . RECORD lista_campos END

    INTEGER         shift and go to state 100
    REAL            shift and go to state 101
    CHAR            shift and go to state 102
    BOOLEAN         shift and go to state 103
    ARRAY           shift and go to state 104
    RECORD          shift and go to state 105

    tipo                           shift and go to state 158

state 154

    (38) param -> lista_id COLON tipo .
    (39) param -> lista_id COLON tipo . SEMICOLON param

    RPAREN          reduce using rule 38 (param -> lista_id COLON tipo .)
    SEMICOLON       shift and go to state 159


state 155

    (35) procedure -> PROCEDURE ID LPAREN parametros RPAREN bloco_rotina .

    FUNCTION        reduce using rule 35 (procedure -> PROCEDURE ID LPAREN parametros RPAREN bloco_rotina .)
    PROCEDURE       reduce using rule 35 (procedure -> PROCEDURE ID LPAREN parametros RPAREN bloco_rotina .)
    BEGIN           reduce using rule 35 (procedure -> PROCEDURE ID LPAREN parametros RPAREN bloco_rotina .)


state 156

    (40) bloco_rotina -> declaracoes . bloco
    (41) bloco -> . BEGIN lista_com END

    BEGIN           shift and go to state 10

    bloco                          shift and go to state 160

state 157

    (25) tipo -> ARRAY LBRACKET NUMERO RBRACKET OF . tipo
    (21) tipo -> . INTEGER
    (22) tipo -> . REAL
    (23) tipo -> . CHAR
    (24) tipo -> . BOOLEAN
    (25) tipo -> . ARRAY LBRACKET NUMERO RBRACKET OF tipo
    (26) tipo -> . RECORD lista_campos END

    INTEGER         shift and go to state 100
    REAL            shift and go to state 101
    CHAR            shift and go to state 102
    BOOLEAN         shift and go to state 103
    ARRAY           shift and go to state 104
    RECORD          shift and go to state 105

    tipo                           shift and go to state 161

state 158

    (34) function -> FUNCTION ID LPAREN parametros RPAREN COLON tipo . bloco_rotina
    (40) bloco_rotina -> . declaracoes bloco
    (2) declaracoes -> . def_const def_tipos def_var def_rotina
    (3) declaracoes -> . empty
    (4) def_const -> . CONST lista_const
    (5) def_const -> . empty
    (74) empty -> .

    CONST           shift and go to state 8
    BEGIN           reduce using rule 74 (empty -> .)
    TYPE            reduce using rule 74 (empty -> .)
    VAR             reduce using rule 74 (empty -> .)
    FUNCTION        reduce using rule 74 (empty -> .)
    PROCEDURE       reduce using rule 74 (empty -> .)

    bloco_rotina                   shift and go to state 162
    declaracoes                    shift and go to state 156
    def_const                      shift and go to state 6
    empty                          shift and go to state 7

state 159

    (39) param -> lista_id COLON tipo SEMICOLON . param
    (38) param -> . lista_id COLON tipo
    (39) param -> . lista_id COLON tipo SEMICOLON param
    (19) lista_id -> . ID COMMA lista_id
    (20) lista_id -> . ID

    ID              shift and go to state 61

    lista_id                       shift and go to state 138
    param                          shift and go to state 163

state 160

    (40) bloco_rotina -> declaracoes bloco .

    FUNCTION        reduce using rule 40 (bloco_rotina -> declaracoes bloco .)
    PROCEDURE       reduce using rule 40 (bloco_rotina -> declaracoes bloco .)
    BEGIN           reduce using rule 40 (bloco_rotina -> declaracoes bloco .)


state 161

    (25) tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .

    SEMICOLON       reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    RPAREN          reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    CONST           reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    BEGIN           reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    TYPE            reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    VAR             reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    FUNCTION        reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)
    PROCEDURE       reduce using rule 25 (tipo -> ARRAY LBRACKET NUMERO RBRACKET OF tipo .)


state 162

    (34) function -> FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina .

    FUNCTION        reduce using rule 34 (function -> FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina .)
    PROCEDURE       reduce using rule 34 (function -> FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina .)
    BEGIN           reduce using rule 34 (function -> FUNCTION ID LPAREN parametros RPAREN COLON tipo bloco_rotina .)


state 163

    (39) param -> lista_id COLON tipo SEMICOLON param .

    RPAREN          reduce using rule 39 (param -> lista_id COLON tipo SEMICOLON param .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (declaracoes -> empty)
WARNING: rejected rule (def_const -> empty) in state 7
WARNING: reduce/reduce conflict in state 38 resolved using rule (lista_com -> comando SEMICOLON)
WARNING: rejected rule (empty -> <empty>) in state 38
WARNING: reduce/reduce conflict in state 68 resolved using rule (exp -> ID)
WARNING: rejected rule (parametro -> ID) in state 68
WARNING: Rule (parametro -> ID) is never reduced
