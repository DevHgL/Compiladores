Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABRECOL
    ABREPAR
    COMPARACAO
    DIVIDE
    DOISPONTOS
    FECHACOL
    FECHAPAR
    IGUAL
    MAIOR
    MAIS
    MENOR
    MENOS
    PONTO
    PONTOVIRGULA
    VEZES
    VIRGULA

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> DECLARACOES BLOCO
Rule 2     LISTA_COM -> <empty>
Rule 3     LISTA_COM -> COMANDO LISTA_COM_RESTO
Rule 4     LISTA_COM_RESTO -> ; COMANDO LISTA_COM_RESTO
Rule 5     LISTA_COM_RESTO -> ;
Rule 6     BLOCO -> BEGIN COMANDO LISTA_COM END
Rule 7     DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA
Rule 8     DEF_CONST -> <empty>
Rule 9     DEF_CONST -> CONSTANTE DEF_CONST
Rule 10    CONSTANTE -> CONST ID = CONST_VALOR ;
Rule 11    CONST_VALOR -> PALAVRA
Rule 12    CONST_VALOR -> EXP_MAT
Rule 13    DEF_TIPOS -> <empty>
Rule 14    DEF_TIPOS -> TIPO DEF_TIPOS
Rule 15    TIPO -> TYPE ID = TIPO_DADO ;
Rule 16    TIPO_DADO -> INTEGER
Rule 17    TIPO_DADO -> REAL
Rule 18    TIPO_DADO -> CHAR
Rule 19    TIPO_DADO -> BOOLEAN
Rule 20    TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO
Rule 21    TIPO_DADO -> RECORD CAMPOS END
Rule 22    TIPO_DADO -> ID
Rule 23    DEF_VAR -> <empty>
Rule 24    DEF_VAR -> VARIAVEL DEF_VAR
Rule 25    VARIAVEL -> VAR CAMPOS ;
Rule 26    CAMPOS -> CAMPO LISTA_CAMPOS
Rule 27    LISTA_CAMPOS -> <empty>
Rule 28    LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS
Rule 29    CAMPO -> ID LISTA_ID : TIPO_DADO
Rule 30    LISTA_ID -> <empty>
Rule 31    LISTA_ID -> , ID LISTA_ID
Rule 32    DEF_ROTINA -> <empty>
Rule 33    DEF_ROTINA -> ROTINA DEF_ROTINA
Rule 34    ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
Rule 35    ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA
Rule 36    PARAM_ROTINA -> <empty>
Rule 37    PARAM_ROTINA -> ( CAMPOS )
Rule 38    BLOCO_ROTINA -> DEF_VAR BLOCO
Rule 39    COMANDO -> ID ATRIBUICAO EXP
Rule 40    COMANDO -> WHILE EXP_LOGICA DO BLOCO
Rule 41    COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else
Rule 42    COMANDO -> FOR FOR_PARAMS DO BLOCO
Rule 43    COMANDO -> WRITE CONST_VALOR
Rule 44    COMANDO -> READ ID
Rule 45    alternativa_else -> ELSE BLOCO
Rule 46    alternativa_else -> <empty>
Rule 47    FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO PARAMETRO
Rule 48    EXP -> EXP_MAT
Rule 49    EXP -> EXP_LOGICA
Rule 50    EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA
Rule 51    EXP_LOGICA -> PARAM_LOGICO
Rule 52    PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO
Rule 53    EXP_MAT -> PARAMETRO OP_MAT EXP_MAT
Rule 54    EXP_MAT -> PARAMETRO
Rule 55    OP_LOGICO -> AND
Rule 56    OP_LOGICO -> OR
Rule 57    OP_COMP -> >
Rule 58    OP_COMP -> <
Rule 59    OP_COMP -> =
Rule 60    OP_MAT -> +
Rule 61    OP_MAT -> -
Rule 62    OP_MAT -> *
Rule 63    OP_MAT -> /
Rule 64    PARAMETRO -> ID
Rule 65    PARAMETRO -> NUMERO
Rule 66    PARAMETRO -> FALSE
Rule 67    PARAMETRO -> TRUE

Terminals, with rules where they appear

(                    : 37
)                    : 37
*                    : 62
+                    : 60
,                    : 31
-                    : 61
/                    : 63
:                    : 29 34
;                    : 4 5 10 15 25 28
<                    : 58
=                    : 10 15 59
>                    : 57
ABRECOL              : 
ABREPAR              : 
AND                  : 55
ARRAY                : 20
ATRIBUICAO           : 39 47
BEGIN                : 6
BOOLEAN              : 19
CHAR                 : 18
COMPARACAO           : 
CONST                : 10
DIVIDE               : 
DO                   : 40 42
DOISPONTOS           : 
ELSE                 : 45
END                  : 6 21
FALSE                : 66
FECHACOL             : 
FECHAPAR             : 
FOR                  : 42
FUNCTION             : 34
ID                   : 10 15 22 29 31 34 35 39 44 47 64
IF                   : 41
IGUAL                : 
INTEGER              : 16
MAIOR                : 
MAIS                 : 
MENOR                : 
MENOS                : 
NUMERO               : 20 65
OF                   : 20
OR                   : 56
PALAVRA              : 11
PONTO                : 
PONTOVIRGULA         : 
PROCEDURE            : 35
READ                 : 44
REAL                 : 17
RECORD               : 21
THEN                 : 41
TO                   : 47
TRUE                 : 67
TYPE                 : 15
VAR                  : 25
VEZES                : 
VIRGULA              : 
WHILE                : 40
WRITE                : 43
[                    : 20
]                    : 20
error                : 

Nonterminals, with rules where they appear

BLOCO                : 1 38 40 41 42 45
BLOCO_ROTINA         : 34 35
CAMPO                : 26 28
CAMPOS               : 21 25 37
COMANDO              : 3 4 6
CONSTANTE            : 9
CONST_VALOR          : 10 43
DECLARACOES          : 1
DEF_CONST            : 7 9
DEF_ROTINA           : 7 33
DEF_TIPOS            : 7 14
DEF_VAR              : 7 24 38
EXP                  : 39
EXP_LOGICA           : 40 41 49 50
EXP_MAT              : 12 48 53
FOR_PARAMS           : 42
LISTA_CAMPOS         : 26 28
LISTA_COM            : 6
LISTA_COM_RESTO      : 3 4
LISTA_ID             : 29 31
OP_COMP              : 52
OP_LOGICO            : 50
OP_MAT               : 53
PARAMETRO            : 47 47 52 52 53 54
PARAM_LOGICO         : 50 51
PARAM_ROTINA         : 34 35
PROGRAMA             : 0
ROTINA               : 33
TIPO                 : 14
TIPO_DADO            : 15 20 29 34
VARIAVEL             : 24
alternativa_else     : 41

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . DECLARACOES BLOCO
    (7) DECLARACOES -> . DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA
    (8) DEF_CONST -> .
    (9) DEF_CONST -> . CONSTANTE DEF_CONST
    (10) CONSTANTE -> . CONST ID = CONST_VALOR ;

    TYPE            reduce using rule 8 (DEF_CONST -> .)
    VAR             reduce using rule 8 (DEF_CONST -> .)
    FUNCTION        reduce using rule 8 (DEF_CONST -> .)
    PROCEDURE       reduce using rule 8 (DEF_CONST -> .)
    BEGIN           reduce using rule 8 (DEF_CONST -> .)
    CONST           shift and go to state 5

    PROGRAMA                       shift and go to state 1
    DECLARACOES                    shift and go to state 2
    DEF_CONST                      shift and go to state 3
    CONSTANTE                      shift and go to state 4

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> DECLARACOES . BLOCO
    (6) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 6

state 3

    (7) DECLARACOES -> DEF_CONST . DEF_TIPOS DEF_VAR DEF_ROTINA
    (13) DEF_TIPOS -> .
    (14) DEF_TIPOS -> . TIPO DEF_TIPOS
    (15) TIPO -> . TYPE ID = TIPO_DADO ;

    VAR             reduce using rule 13 (DEF_TIPOS -> .)
    FUNCTION        reduce using rule 13 (DEF_TIPOS -> .)
    PROCEDURE       reduce using rule 13 (DEF_TIPOS -> .)
    BEGIN           reduce using rule 13 (DEF_TIPOS -> .)
    TYPE            shift and go to state 10

    DEF_TIPOS                      shift and go to state 8
    TIPO                           shift and go to state 9

state 4

    (9) DEF_CONST -> CONSTANTE . DEF_CONST
    (8) DEF_CONST -> .
    (9) DEF_CONST -> . CONSTANTE DEF_CONST
    (10) CONSTANTE -> . CONST ID = CONST_VALOR ;

    TYPE            reduce using rule 8 (DEF_CONST -> .)
    VAR             reduce using rule 8 (DEF_CONST -> .)
    FUNCTION        reduce using rule 8 (DEF_CONST -> .)
    PROCEDURE       reduce using rule 8 (DEF_CONST -> .)
    BEGIN           reduce using rule 8 (DEF_CONST -> .)
    CONST           shift and go to state 5

    CONSTANTE                      shift and go to state 4
    DEF_CONST                      shift and go to state 11

state 5

    (10) CONSTANTE -> CONST . ID = CONST_VALOR ;

    ID              shift and go to state 12


state 6

    (1) PROGRAMA -> DECLARACOES BLOCO .

    $end            reduce using rule 1 (PROGRAMA -> DECLARACOES BLOCO .)


state 7

    (6) BLOCO -> BEGIN . COMANDO LISTA_COM END
    (39) COMANDO -> . ID ATRIBUICAO EXP
    (40) COMANDO -> . WHILE EXP_LOGICA DO BLOCO
    (41) COMANDO -> . IF EXP_LOGICA THEN BLOCO alternativa_else
    (42) COMANDO -> . FOR FOR_PARAMS DO BLOCO
    (43) COMANDO -> . WRITE CONST_VALOR
    (44) COMANDO -> . READ ID

    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    COMANDO                        shift and go to state 13

state 8

    (7) DECLARACOES -> DEF_CONST DEF_TIPOS . DEF_VAR DEF_ROTINA
    (23) DEF_VAR -> .
    (24) DEF_VAR -> . VARIAVEL DEF_VAR
    (25) VARIAVEL -> . VAR CAMPOS ;

    FUNCTION        reduce using rule 23 (DEF_VAR -> .)
    PROCEDURE       reduce using rule 23 (DEF_VAR -> .)
    BEGIN           reduce using rule 23 (DEF_VAR -> .)
    VAR             shift and go to state 22

    DEF_VAR                        shift and go to state 20
    VARIAVEL                       shift and go to state 21

state 9

    (14) DEF_TIPOS -> TIPO . DEF_TIPOS
    (13) DEF_TIPOS -> .
    (14) DEF_TIPOS -> . TIPO DEF_TIPOS
    (15) TIPO -> . TYPE ID = TIPO_DADO ;

    VAR             reduce using rule 13 (DEF_TIPOS -> .)
    FUNCTION        reduce using rule 13 (DEF_TIPOS -> .)
    PROCEDURE       reduce using rule 13 (DEF_TIPOS -> .)
    BEGIN           reduce using rule 13 (DEF_TIPOS -> .)
    TYPE            shift and go to state 10

    TIPO                           shift and go to state 9
    DEF_TIPOS                      shift and go to state 23

state 10

    (15) TIPO -> TYPE . ID = TIPO_DADO ;

    ID              shift and go to state 24


state 11

    (9) DEF_CONST -> CONSTANTE DEF_CONST .

    TYPE            reduce using rule 9 (DEF_CONST -> CONSTANTE DEF_CONST .)
    VAR             reduce using rule 9 (DEF_CONST -> CONSTANTE DEF_CONST .)
    FUNCTION        reduce using rule 9 (DEF_CONST -> CONSTANTE DEF_CONST .)
    PROCEDURE       reduce using rule 9 (DEF_CONST -> CONSTANTE DEF_CONST .)
    BEGIN           reduce using rule 9 (DEF_CONST -> CONSTANTE DEF_CONST .)


state 12

    (10) CONSTANTE -> CONST ID . = CONST_VALOR ;

    =               shift and go to state 25


state 13

    (6) BLOCO -> BEGIN COMANDO . LISTA_COM END
    (2) LISTA_COM -> .
    (3) LISTA_COM -> . COMANDO LISTA_COM_RESTO
    (39) COMANDO -> . ID ATRIBUICAO EXP
    (40) COMANDO -> . WHILE EXP_LOGICA DO BLOCO
    (41) COMANDO -> . IF EXP_LOGICA THEN BLOCO alternativa_else
    (42) COMANDO -> . FOR FOR_PARAMS DO BLOCO
    (43) COMANDO -> . WRITE CONST_VALOR
    (44) COMANDO -> . READ ID

    END             reduce using rule 2 (LISTA_COM -> .)
    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    COMANDO                        shift and go to state 26
    LISTA_COM                      shift and go to state 27

state 14

    (39) COMANDO -> ID . ATRIBUICAO EXP

    ATRIBUICAO      shift and go to state 28


state 15

    (40) COMANDO -> WHILE . EXP_LOGICA DO BLOCO
    (50) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (51) EXP_LOGICA -> . PARAM_LOGICO
    (52) PARAM_LOGICO -> . PARAMETRO OP_COMP PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    EXP_LOGICA                     shift and go to state 29
    PARAM_LOGICO                   shift and go to state 30
    PARAMETRO                      shift and go to state 31

state 16

    (41) COMANDO -> IF . EXP_LOGICA THEN BLOCO alternativa_else
    (50) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (51) EXP_LOGICA -> . PARAM_LOGICO
    (52) PARAM_LOGICO -> . PARAMETRO OP_COMP PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    EXP_LOGICA                     shift and go to state 36
    PARAM_LOGICO                   shift and go to state 30
    PARAMETRO                      shift and go to state 31

state 17

    (42) COMANDO -> FOR . FOR_PARAMS DO BLOCO
    (47) FOR_PARAMS -> . ID ATRIBUICAO PARAMETRO TO PARAMETRO

    ID              shift and go to state 38

    FOR_PARAMS                     shift and go to state 37

state 18

    (43) COMANDO -> WRITE . CONST_VALOR
    (11) CONST_VALOR -> . PALAVRA
    (12) CONST_VALOR -> . EXP_MAT
    (53) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (54) EXP_MAT -> . PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    PALAVRA         shift and go to state 40
    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    CONST_VALOR                    shift and go to state 39
    EXP_MAT                        shift and go to state 41
    PARAMETRO                      shift and go to state 42

state 19

    (44) COMANDO -> READ . ID

    ID              shift and go to state 43


state 20

    (7) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR . DEF_ROTINA
    (32) DEF_ROTINA -> .
    (33) DEF_ROTINA -> . ROTINA DEF_ROTINA
    (34) ROTINA -> . FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
    (35) ROTINA -> . PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA

    BEGIN           reduce using rule 32 (DEF_ROTINA -> .)
    FUNCTION        shift and go to state 46
    PROCEDURE       shift and go to state 47

    DEF_ROTINA                     shift and go to state 44
    ROTINA                         shift and go to state 45

state 21

    (24) DEF_VAR -> VARIAVEL . DEF_VAR
    (23) DEF_VAR -> .
    (24) DEF_VAR -> . VARIAVEL DEF_VAR
    (25) VARIAVEL -> . VAR CAMPOS ;

    FUNCTION        reduce using rule 23 (DEF_VAR -> .)
    PROCEDURE       reduce using rule 23 (DEF_VAR -> .)
    BEGIN           reduce using rule 23 (DEF_VAR -> .)
    VAR             shift and go to state 22

    VARIAVEL                       shift and go to state 21
    DEF_VAR                        shift and go to state 48

state 22

    (25) VARIAVEL -> VAR . CAMPOS ;
    (26) CAMPOS -> . CAMPO LISTA_CAMPOS
    (29) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 51

    CAMPOS                         shift and go to state 49
    CAMPO                          shift and go to state 50

state 23

    (14) DEF_TIPOS -> TIPO DEF_TIPOS .

    VAR             reduce using rule 14 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    FUNCTION        reduce using rule 14 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    PROCEDURE       reduce using rule 14 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    BEGIN           reduce using rule 14 (DEF_TIPOS -> TIPO DEF_TIPOS .)


state 24

    (15) TIPO -> TYPE ID . = TIPO_DADO ;

    =               shift and go to state 52


state 25

    (10) CONSTANTE -> CONST ID = . CONST_VALOR ;
    (11) CONST_VALOR -> . PALAVRA
    (12) CONST_VALOR -> . EXP_MAT
    (53) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (54) EXP_MAT -> . PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    PALAVRA         shift and go to state 40
    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    CONST_VALOR                    shift and go to state 53
    EXP_MAT                        shift and go to state 41
    PARAMETRO                      shift and go to state 42

state 26

    (3) LISTA_COM -> COMANDO . LISTA_COM_RESTO
    (4) LISTA_COM_RESTO -> . ; COMANDO LISTA_COM_RESTO
    (5) LISTA_COM_RESTO -> . ;

    ;               shift and go to state 55

    LISTA_COM_RESTO                shift and go to state 54

state 27

    (6) BLOCO -> BEGIN COMANDO LISTA_COM . END

    END             shift and go to state 56


state 28

    (39) COMANDO -> ID ATRIBUICAO . EXP
    (48) EXP -> . EXP_MAT
    (49) EXP -> . EXP_LOGICA
    (53) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (54) EXP_MAT -> . PARAMETRO
    (50) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (51) EXP_LOGICA -> . PARAM_LOGICO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE
    (52) PARAM_LOGICO -> . PARAMETRO OP_COMP PARAMETRO

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    EXP                            shift and go to state 57
    EXP_MAT                        shift and go to state 58
    EXP_LOGICA                     shift and go to state 59
    PARAMETRO                      shift and go to state 60
    PARAM_LOGICO                   shift and go to state 30

state 29

    (40) COMANDO -> WHILE EXP_LOGICA . DO BLOCO

    DO              shift and go to state 61


state 30

    (50) EXP_LOGICA -> PARAM_LOGICO . OP_LOGICO EXP_LOGICA
    (51) EXP_LOGICA -> PARAM_LOGICO .
    (55) OP_LOGICO -> . AND
    (56) OP_LOGICO -> . OR

    DO              reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    THEN            reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    ID              reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    WHILE           reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    IF              reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    FOR             reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    WRITE           reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    READ            reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    END             reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    ;               reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO .)
    AND             shift and go to state 63
    OR              shift and go to state 64

    OP_LOGICO                      shift and go to state 62

state 31

    (52) PARAM_LOGICO -> PARAMETRO . OP_COMP PARAMETRO
    (57) OP_COMP -> . >
    (58) OP_COMP -> . <
    (59) OP_COMP -> . =

    >               shift and go to state 66
    <               shift and go to state 67
    =               shift and go to state 68

    OP_COMP                        shift and go to state 65

state 32

    (64) PARAMETRO -> ID .

    >               reduce using rule 64 (PARAMETRO -> ID .)
    <               reduce using rule 64 (PARAMETRO -> ID .)
    =               reduce using rule 64 (PARAMETRO -> ID .)
    +               reduce using rule 64 (PARAMETRO -> ID .)
    -               reduce using rule 64 (PARAMETRO -> ID .)
    *               reduce using rule 64 (PARAMETRO -> ID .)
    /               reduce using rule 64 (PARAMETRO -> ID .)
    ID              reduce using rule 64 (PARAMETRO -> ID .)
    WHILE           reduce using rule 64 (PARAMETRO -> ID .)
    IF              reduce using rule 64 (PARAMETRO -> ID .)
    FOR             reduce using rule 64 (PARAMETRO -> ID .)
    WRITE           reduce using rule 64 (PARAMETRO -> ID .)
    READ            reduce using rule 64 (PARAMETRO -> ID .)
    END             reduce using rule 64 (PARAMETRO -> ID .)
    ;               reduce using rule 64 (PARAMETRO -> ID .)
    AND             reduce using rule 64 (PARAMETRO -> ID .)
    OR              reduce using rule 64 (PARAMETRO -> ID .)
    DO              reduce using rule 64 (PARAMETRO -> ID .)
    THEN            reduce using rule 64 (PARAMETRO -> ID .)
    TO              reduce using rule 64 (PARAMETRO -> ID .)


state 33

    (65) PARAMETRO -> NUMERO .

    >               reduce using rule 65 (PARAMETRO -> NUMERO .)
    <               reduce using rule 65 (PARAMETRO -> NUMERO .)
    =               reduce using rule 65 (PARAMETRO -> NUMERO .)
    +               reduce using rule 65 (PARAMETRO -> NUMERO .)
    -               reduce using rule 65 (PARAMETRO -> NUMERO .)
    *               reduce using rule 65 (PARAMETRO -> NUMERO .)
    /               reduce using rule 65 (PARAMETRO -> NUMERO .)
    ID              reduce using rule 65 (PARAMETRO -> NUMERO .)
    WHILE           reduce using rule 65 (PARAMETRO -> NUMERO .)
    IF              reduce using rule 65 (PARAMETRO -> NUMERO .)
    FOR             reduce using rule 65 (PARAMETRO -> NUMERO .)
    WRITE           reduce using rule 65 (PARAMETRO -> NUMERO .)
    READ            reduce using rule 65 (PARAMETRO -> NUMERO .)
    END             reduce using rule 65 (PARAMETRO -> NUMERO .)
    ;               reduce using rule 65 (PARAMETRO -> NUMERO .)
    AND             reduce using rule 65 (PARAMETRO -> NUMERO .)
    OR              reduce using rule 65 (PARAMETRO -> NUMERO .)
    DO              reduce using rule 65 (PARAMETRO -> NUMERO .)
    THEN            reduce using rule 65 (PARAMETRO -> NUMERO .)
    TO              reduce using rule 65 (PARAMETRO -> NUMERO .)


state 34

    (66) PARAMETRO -> FALSE .

    >               reduce using rule 66 (PARAMETRO -> FALSE .)
    <               reduce using rule 66 (PARAMETRO -> FALSE .)
    =               reduce using rule 66 (PARAMETRO -> FALSE .)
    +               reduce using rule 66 (PARAMETRO -> FALSE .)
    -               reduce using rule 66 (PARAMETRO -> FALSE .)
    *               reduce using rule 66 (PARAMETRO -> FALSE .)
    /               reduce using rule 66 (PARAMETRO -> FALSE .)
    ID              reduce using rule 66 (PARAMETRO -> FALSE .)
    WHILE           reduce using rule 66 (PARAMETRO -> FALSE .)
    IF              reduce using rule 66 (PARAMETRO -> FALSE .)
    FOR             reduce using rule 66 (PARAMETRO -> FALSE .)
    WRITE           reduce using rule 66 (PARAMETRO -> FALSE .)
    READ            reduce using rule 66 (PARAMETRO -> FALSE .)
    END             reduce using rule 66 (PARAMETRO -> FALSE .)
    ;               reduce using rule 66 (PARAMETRO -> FALSE .)
    AND             reduce using rule 66 (PARAMETRO -> FALSE .)
    OR              reduce using rule 66 (PARAMETRO -> FALSE .)
    DO              reduce using rule 66 (PARAMETRO -> FALSE .)
    THEN            reduce using rule 66 (PARAMETRO -> FALSE .)
    TO              reduce using rule 66 (PARAMETRO -> FALSE .)


state 35

    (67) PARAMETRO -> TRUE .

    >               reduce using rule 67 (PARAMETRO -> TRUE .)
    <               reduce using rule 67 (PARAMETRO -> TRUE .)
    =               reduce using rule 67 (PARAMETRO -> TRUE .)
    +               reduce using rule 67 (PARAMETRO -> TRUE .)
    -               reduce using rule 67 (PARAMETRO -> TRUE .)
    *               reduce using rule 67 (PARAMETRO -> TRUE .)
    /               reduce using rule 67 (PARAMETRO -> TRUE .)
    ID              reduce using rule 67 (PARAMETRO -> TRUE .)
    WHILE           reduce using rule 67 (PARAMETRO -> TRUE .)
    IF              reduce using rule 67 (PARAMETRO -> TRUE .)
    FOR             reduce using rule 67 (PARAMETRO -> TRUE .)
    WRITE           reduce using rule 67 (PARAMETRO -> TRUE .)
    READ            reduce using rule 67 (PARAMETRO -> TRUE .)
    END             reduce using rule 67 (PARAMETRO -> TRUE .)
    ;               reduce using rule 67 (PARAMETRO -> TRUE .)
    AND             reduce using rule 67 (PARAMETRO -> TRUE .)
    OR              reduce using rule 67 (PARAMETRO -> TRUE .)
    DO              reduce using rule 67 (PARAMETRO -> TRUE .)
    THEN            reduce using rule 67 (PARAMETRO -> TRUE .)
    TO              reduce using rule 67 (PARAMETRO -> TRUE .)


state 36

    (41) COMANDO -> IF EXP_LOGICA . THEN BLOCO alternativa_else

    THEN            shift and go to state 69


state 37

    (42) COMANDO -> FOR FOR_PARAMS . DO BLOCO

    DO              shift and go to state 70


state 38

    (47) FOR_PARAMS -> ID . ATRIBUICAO PARAMETRO TO PARAMETRO

    ATRIBUICAO      shift and go to state 71


state 39

    (43) COMANDO -> WRITE CONST_VALOR .

    ID              reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    WHILE           reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    IF              reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    FOR             reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    WRITE           reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    READ            reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    END             reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)
    ;               reduce using rule 43 (COMANDO -> WRITE CONST_VALOR .)


state 40

    (11) CONST_VALOR -> PALAVRA .

    ID              reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    WHILE           reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    IF              reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    FOR             reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    WRITE           reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    READ            reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    END             reduce using rule 11 (CONST_VALOR -> PALAVRA .)
    ;               reduce using rule 11 (CONST_VALOR -> PALAVRA .)


state 41

    (12) CONST_VALOR -> EXP_MAT .

    ID              reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    WHILE           reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    IF              reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    FOR             reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    WRITE           reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    READ            reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    END             reduce using rule 12 (CONST_VALOR -> EXP_MAT .)
    ;               reduce using rule 12 (CONST_VALOR -> EXP_MAT .)


state 42

    (53) EXP_MAT -> PARAMETRO . OP_MAT EXP_MAT
    (54) EXP_MAT -> PARAMETRO .
    (60) OP_MAT -> . +
    (61) OP_MAT -> . -
    (62) OP_MAT -> . *
    (63) OP_MAT -> . /

    ID              reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    WHILE           reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    IF              reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    FOR             reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    WRITE           reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    READ            reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    END             reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    ;               reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76

    OP_MAT                         shift and go to state 72

state 43

    (44) COMANDO -> READ ID .

    ID              reduce using rule 44 (COMANDO -> READ ID .)
    WHILE           reduce using rule 44 (COMANDO -> READ ID .)
    IF              reduce using rule 44 (COMANDO -> READ ID .)
    FOR             reduce using rule 44 (COMANDO -> READ ID .)
    WRITE           reduce using rule 44 (COMANDO -> READ ID .)
    READ            reduce using rule 44 (COMANDO -> READ ID .)
    END             reduce using rule 44 (COMANDO -> READ ID .)
    ;               reduce using rule 44 (COMANDO -> READ ID .)


state 44

    (7) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA .

    BEGIN           reduce using rule 7 (DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA .)


state 45

    (33) DEF_ROTINA -> ROTINA . DEF_ROTINA
    (32) DEF_ROTINA -> .
    (33) DEF_ROTINA -> . ROTINA DEF_ROTINA
    (34) ROTINA -> . FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
    (35) ROTINA -> . PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA

    BEGIN           reduce using rule 32 (DEF_ROTINA -> .)
    FUNCTION        shift and go to state 46
    PROCEDURE       shift and go to state 47

    ROTINA                         shift and go to state 45
    DEF_ROTINA                     shift and go to state 77

state 46

    (34) ROTINA -> FUNCTION . ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA

    ID              shift and go to state 78


state 47

    (35) ROTINA -> PROCEDURE . ID PARAM_ROTINA BLOCO_ROTINA

    ID              shift and go to state 79


state 48

    (24) DEF_VAR -> VARIAVEL DEF_VAR .

    FUNCTION        reduce using rule 24 (DEF_VAR -> VARIAVEL DEF_VAR .)
    PROCEDURE       reduce using rule 24 (DEF_VAR -> VARIAVEL DEF_VAR .)
    BEGIN           reduce using rule 24 (DEF_VAR -> VARIAVEL DEF_VAR .)


state 49

    (25) VARIAVEL -> VAR CAMPOS . ;

    ;               shift and go to state 80


state 50

    (26) CAMPOS -> CAMPO . LISTA_CAMPOS
    (27) LISTA_CAMPOS -> .
    (28) LISTA_CAMPOS -> . ; CAMPO LISTA_CAMPOS

  ! shift/reduce conflict for ; resolved as shift
    END             reduce using rule 27 (LISTA_CAMPOS -> .)
    )               reduce using rule 27 (LISTA_CAMPOS -> .)
    ;               shift and go to state 82

  ! ;               [ reduce using rule 27 (LISTA_CAMPOS -> .) ]

    LISTA_CAMPOS                   shift and go to state 81

state 51

    (29) CAMPO -> ID . LISTA_ID : TIPO_DADO
    (30) LISTA_ID -> .
    (31) LISTA_ID -> . , ID LISTA_ID

    :               reduce using rule 30 (LISTA_ID -> .)
    ,               shift and go to state 84

    LISTA_ID                       shift and go to state 83

state 52

    (15) TIPO -> TYPE ID = . TIPO_DADO ;
    (16) TIPO_DADO -> . INTEGER
    (17) TIPO_DADO -> . REAL
    (18) TIPO_DADO -> . CHAR
    (19) TIPO_DADO -> . BOOLEAN
    (20) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD CAMPOS END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 87
    REAL            shift and go to state 88
    CHAR            shift and go to state 89
    BOOLEAN         shift and go to state 90
    ARRAY           shift and go to state 91
    RECORD          shift and go to state 92
    ID              shift and go to state 85

    TIPO_DADO                      shift and go to state 86

state 53

    (10) CONSTANTE -> CONST ID = CONST_VALOR . ;

    ;               shift and go to state 93


state 54

    (3) LISTA_COM -> COMANDO LISTA_COM_RESTO .

    END             reduce using rule 3 (LISTA_COM -> COMANDO LISTA_COM_RESTO .)


state 55

    (4) LISTA_COM_RESTO -> ; . COMANDO LISTA_COM_RESTO
    (5) LISTA_COM_RESTO -> ; .
    (39) COMANDO -> . ID ATRIBUICAO EXP
    (40) COMANDO -> . WHILE EXP_LOGICA DO BLOCO
    (41) COMANDO -> . IF EXP_LOGICA THEN BLOCO alternativa_else
    (42) COMANDO -> . FOR FOR_PARAMS DO BLOCO
    (43) COMANDO -> . WRITE CONST_VALOR
    (44) COMANDO -> . READ ID

    END             reduce using rule 5 (LISTA_COM_RESTO -> ; .)
    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    COMANDO                        shift and go to state 94

state 56

    (6) BLOCO -> BEGIN COMANDO LISTA_COM END .

    $end            reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    ID              reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    WHILE           reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    IF              reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    FOR             reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    WRITE           reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    READ            reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    END             reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    ;               reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    ELSE            reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    FUNCTION        reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    PROCEDURE       reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    BEGIN           reduce using rule 6 (BLOCO -> BEGIN COMANDO LISTA_COM END .)


state 57

    (39) COMANDO -> ID ATRIBUICAO EXP .

    ID              reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    WHILE           reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    IF              reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    FOR             reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    WRITE           reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    READ            reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    END             reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)
    ;               reduce using rule 39 (COMANDO -> ID ATRIBUICAO EXP .)


state 58

    (48) EXP -> EXP_MAT .

    ID              reduce using rule 48 (EXP -> EXP_MAT .)
    WHILE           reduce using rule 48 (EXP -> EXP_MAT .)
    IF              reduce using rule 48 (EXP -> EXP_MAT .)
    FOR             reduce using rule 48 (EXP -> EXP_MAT .)
    WRITE           reduce using rule 48 (EXP -> EXP_MAT .)
    READ            reduce using rule 48 (EXP -> EXP_MAT .)
    END             reduce using rule 48 (EXP -> EXP_MAT .)
    ;               reduce using rule 48 (EXP -> EXP_MAT .)


state 59

    (49) EXP -> EXP_LOGICA .

    ID              reduce using rule 49 (EXP -> EXP_LOGICA .)
    WHILE           reduce using rule 49 (EXP -> EXP_LOGICA .)
    IF              reduce using rule 49 (EXP -> EXP_LOGICA .)
    FOR             reduce using rule 49 (EXP -> EXP_LOGICA .)
    WRITE           reduce using rule 49 (EXP -> EXP_LOGICA .)
    READ            reduce using rule 49 (EXP -> EXP_LOGICA .)
    END             reduce using rule 49 (EXP -> EXP_LOGICA .)
    ;               reduce using rule 49 (EXP -> EXP_LOGICA .)


state 60

    (53) EXP_MAT -> PARAMETRO . OP_MAT EXP_MAT
    (54) EXP_MAT -> PARAMETRO .
    (52) PARAM_LOGICO -> PARAMETRO . OP_COMP PARAMETRO
    (60) OP_MAT -> . +
    (61) OP_MAT -> . -
    (62) OP_MAT -> . *
    (63) OP_MAT -> . /
    (57) OP_COMP -> . >
    (58) OP_COMP -> . <
    (59) OP_COMP -> . =

    ID              reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    WHILE           reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    IF              reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    FOR             reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    WRITE           reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    READ            reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    END             reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    ;               reduce using rule 54 (EXP_MAT -> PARAMETRO .)
    +               shift and go to state 73
    -               shift and go to state 74
    *               shift and go to state 75
    /               shift and go to state 76
    >               shift and go to state 66
    <               shift and go to state 67
    =               shift and go to state 68

    OP_MAT                         shift and go to state 72
    OP_COMP                        shift and go to state 65

state 61

    (40) COMANDO -> WHILE EXP_LOGICA DO . BLOCO
    (6) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 95

state 62

    (50) EXP_LOGICA -> PARAM_LOGICO OP_LOGICO . EXP_LOGICA
    (50) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (51) EXP_LOGICA -> . PARAM_LOGICO
    (52) PARAM_LOGICO -> . PARAMETRO OP_COMP PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    PARAM_LOGICO                   shift and go to state 30
    EXP_LOGICA                     shift and go to state 96
    PARAMETRO                      shift and go to state 31

state 63

    (55) OP_LOGICO -> AND .

    ID              reduce using rule 55 (OP_LOGICO -> AND .)
    NUMERO          reduce using rule 55 (OP_LOGICO -> AND .)
    FALSE           reduce using rule 55 (OP_LOGICO -> AND .)
    TRUE            reduce using rule 55 (OP_LOGICO -> AND .)


state 64

    (56) OP_LOGICO -> OR .

    ID              reduce using rule 56 (OP_LOGICO -> OR .)
    NUMERO          reduce using rule 56 (OP_LOGICO -> OR .)
    FALSE           reduce using rule 56 (OP_LOGICO -> OR .)
    TRUE            reduce using rule 56 (OP_LOGICO -> OR .)


state 65

    (52) PARAM_LOGICO -> PARAMETRO OP_COMP . PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    PARAMETRO                      shift and go to state 97

state 66

    (57) OP_COMP -> > .

    ID              reduce using rule 57 (OP_COMP -> > .)
    NUMERO          reduce using rule 57 (OP_COMP -> > .)
    FALSE           reduce using rule 57 (OP_COMP -> > .)
    TRUE            reduce using rule 57 (OP_COMP -> > .)


state 67

    (58) OP_COMP -> < .

    ID              reduce using rule 58 (OP_COMP -> < .)
    NUMERO          reduce using rule 58 (OP_COMP -> < .)
    FALSE           reduce using rule 58 (OP_COMP -> < .)
    TRUE            reduce using rule 58 (OP_COMP -> < .)


state 68

    (59) OP_COMP -> = .

    ID              reduce using rule 59 (OP_COMP -> = .)
    NUMERO          reduce using rule 59 (OP_COMP -> = .)
    FALSE           reduce using rule 59 (OP_COMP -> = .)
    TRUE            reduce using rule 59 (OP_COMP -> = .)


state 69

    (41) COMANDO -> IF EXP_LOGICA THEN . BLOCO alternativa_else
    (6) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 98

state 70

    (42) COMANDO -> FOR FOR_PARAMS DO . BLOCO
    (6) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 99

state 71

    (47) FOR_PARAMS -> ID ATRIBUICAO . PARAMETRO TO PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    PARAMETRO                      shift and go to state 100

state 72

    (53) EXP_MAT -> PARAMETRO OP_MAT . EXP_MAT
    (53) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (54) EXP_MAT -> . PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    PARAMETRO                      shift and go to state 42
    EXP_MAT                        shift and go to state 101

state 73

    (60) OP_MAT -> + .

    ID              reduce using rule 60 (OP_MAT -> + .)
    NUMERO          reduce using rule 60 (OP_MAT -> + .)
    FALSE           reduce using rule 60 (OP_MAT -> + .)
    TRUE            reduce using rule 60 (OP_MAT -> + .)


state 74

    (61) OP_MAT -> - .

    ID              reduce using rule 61 (OP_MAT -> - .)
    NUMERO          reduce using rule 61 (OP_MAT -> - .)
    FALSE           reduce using rule 61 (OP_MAT -> - .)
    TRUE            reduce using rule 61 (OP_MAT -> - .)


state 75

    (62) OP_MAT -> * .

    ID              reduce using rule 62 (OP_MAT -> * .)
    NUMERO          reduce using rule 62 (OP_MAT -> * .)
    FALSE           reduce using rule 62 (OP_MAT -> * .)
    TRUE            reduce using rule 62 (OP_MAT -> * .)


state 76

    (63) OP_MAT -> / .

    ID              reduce using rule 63 (OP_MAT -> / .)
    NUMERO          reduce using rule 63 (OP_MAT -> / .)
    FALSE           reduce using rule 63 (OP_MAT -> / .)
    TRUE            reduce using rule 63 (OP_MAT -> / .)


state 77

    (33) DEF_ROTINA -> ROTINA DEF_ROTINA .

    BEGIN           reduce using rule 33 (DEF_ROTINA -> ROTINA DEF_ROTINA .)


state 78

    (34) ROTINA -> FUNCTION ID . PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
    (36) PARAM_ROTINA -> .
    (37) PARAM_ROTINA -> . ( CAMPOS )

    :               reduce using rule 36 (PARAM_ROTINA -> .)
    (               shift and go to state 103

    PARAM_ROTINA                   shift and go to state 102

state 79

    (35) ROTINA -> PROCEDURE ID . PARAM_ROTINA BLOCO_ROTINA
    (36) PARAM_ROTINA -> .
    (37) PARAM_ROTINA -> . ( CAMPOS )

    VAR             reduce using rule 36 (PARAM_ROTINA -> .)
    BEGIN           reduce using rule 36 (PARAM_ROTINA -> .)
    (               shift and go to state 103

    PARAM_ROTINA                   shift and go to state 104

state 80

    (25) VARIAVEL -> VAR CAMPOS ; .

    VAR             reduce using rule 25 (VARIAVEL -> VAR CAMPOS ; .)
    FUNCTION        reduce using rule 25 (VARIAVEL -> VAR CAMPOS ; .)
    PROCEDURE       reduce using rule 25 (VARIAVEL -> VAR CAMPOS ; .)
    BEGIN           reduce using rule 25 (VARIAVEL -> VAR CAMPOS ; .)


state 81

    (26) CAMPOS -> CAMPO LISTA_CAMPOS .

    ;               reduce using rule 26 (CAMPOS -> CAMPO LISTA_CAMPOS .)
    END             reduce using rule 26 (CAMPOS -> CAMPO LISTA_CAMPOS .)
    )               reduce using rule 26 (CAMPOS -> CAMPO LISTA_CAMPOS .)


state 82

    (28) LISTA_CAMPOS -> ; . CAMPO LISTA_CAMPOS
    (29) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 51

    CAMPO                          shift and go to state 105

state 83

    (29) CAMPO -> ID LISTA_ID . : TIPO_DADO

    :               shift and go to state 106


state 84

    (31) LISTA_ID -> , . ID LISTA_ID

    ID              shift and go to state 107


state 85

    (22) TIPO_DADO -> ID .

    ;               reduce using rule 22 (TIPO_DADO -> ID .)
    END             reduce using rule 22 (TIPO_DADO -> ID .)
    )               reduce using rule 22 (TIPO_DADO -> ID .)
    VAR             reduce using rule 22 (TIPO_DADO -> ID .)
    BEGIN           reduce using rule 22 (TIPO_DADO -> ID .)


state 86

    (15) TIPO -> TYPE ID = TIPO_DADO . ;

    ;               shift and go to state 108


state 87

    (16) TIPO_DADO -> INTEGER .

    ;               reduce using rule 16 (TIPO_DADO -> INTEGER .)
    END             reduce using rule 16 (TIPO_DADO -> INTEGER .)
    )               reduce using rule 16 (TIPO_DADO -> INTEGER .)
    VAR             reduce using rule 16 (TIPO_DADO -> INTEGER .)
    BEGIN           reduce using rule 16 (TIPO_DADO -> INTEGER .)


state 88

    (17) TIPO_DADO -> REAL .

    ;               reduce using rule 17 (TIPO_DADO -> REAL .)
    END             reduce using rule 17 (TIPO_DADO -> REAL .)
    )               reduce using rule 17 (TIPO_DADO -> REAL .)
    VAR             reduce using rule 17 (TIPO_DADO -> REAL .)
    BEGIN           reduce using rule 17 (TIPO_DADO -> REAL .)


state 89

    (18) TIPO_DADO -> CHAR .

    ;               reduce using rule 18 (TIPO_DADO -> CHAR .)
    END             reduce using rule 18 (TIPO_DADO -> CHAR .)
    )               reduce using rule 18 (TIPO_DADO -> CHAR .)
    VAR             reduce using rule 18 (TIPO_DADO -> CHAR .)
    BEGIN           reduce using rule 18 (TIPO_DADO -> CHAR .)


state 90

    (19) TIPO_DADO -> BOOLEAN .

    ;               reduce using rule 19 (TIPO_DADO -> BOOLEAN .)
    END             reduce using rule 19 (TIPO_DADO -> BOOLEAN .)
    )               reduce using rule 19 (TIPO_DADO -> BOOLEAN .)
    VAR             reduce using rule 19 (TIPO_DADO -> BOOLEAN .)
    BEGIN           reduce using rule 19 (TIPO_DADO -> BOOLEAN .)


state 91

    (20) TIPO_DADO -> ARRAY . [ NUMERO ] OF TIPO_DADO

    [               shift and go to state 109


state 92

    (21) TIPO_DADO -> RECORD . CAMPOS END
    (26) CAMPOS -> . CAMPO LISTA_CAMPOS
    (29) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 51

    CAMPOS                         shift and go to state 110
    CAMPO                          shift and go to state 50

state 93

    (10) CONSTANTE -> CONST ID = CONST_VALOR ; .

    CONST           reduce using rule 10 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    TYPE            reduce using rule 10 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    VAR             reduce using rule 10 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    FUNCTION        reduce using rule 10 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    PROCEDURE       reduce using rule 10 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    BEGIN           reduce using rule 10 (CONSTANTE -> CONST ID = CONST_VALOR ; .)


state 94

    (4) LISTA_COM_RESTO -> ; COMANDO . LISTA_COM_RESTO
    (4) LISTA_COM_RESTO -> . ; COMANDO LISTA_COM_RESTO
    (5) LISTA_COM_RESTO -> . ;

    ;               shift and go to state 55

    LISTA_COM_RESTO                shift and go to state 111

state 95

    (40) COMANDO -> WHILE EXP_LOGICA DO BLOCO .

    ID              reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    WHILE           reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    IF              reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    FOR             reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    WRITE           reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    READ            reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    END             reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)
    ;               reduce using rule 40 (COMANDO -> WHILE EXP_LOGICA DO BLOCO .)


state 96

    (50) EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .

    DO              reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    THEN            reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    ID              reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    WHILE           reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    IF              reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    FOR             reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    WRITE           reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    READ            reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    END             reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    ;               reduce using rule 50 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)


state 97

    (52) PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .

    AND             reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    OR              reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    DO              reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    THEN            reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    ID              reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    WHILE           reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    IF              reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    FOR             reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    WRITE           reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    READ            reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    END             reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)
    ;               reduce using rule 52 (PARAM_LOGICO -> PARAMETRO OP_COMP PARAMETRO .)


state 98

    (41) COMANDO -> IF EXP_LOGICA THEN BLOCO . alternativa_else
    (45) alternativa_else -> . ELSE BLOCO
    (46) alternativa_else -> .

    ELSE            shift and go to state 113
    ID              reduce using rule 46 (alternativa_else -> .)
    WHILE           reduce using rule 46 (alternativa_else -> .)
    IF              reduce using rule 46 (alternativa_else -> .)
    FOR             reduce using rule 46 (alternativa_else -> .)
    WRITE           reduce using rule 46 (alternativa_else -> .)
    READ            reduce using rule 46 (alternativa_else -> .)
    END             reduce using rule 46 (alternativa_else -> .)
    ;               reduce using rule 46 (alternativa_else -> .)

    alternativa_else               shift and go to state 112

state 99

    (42) COMANDO -> FOR FOR_PARAMS DO BLOCO .

    ID              reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    WHILE           reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    IF              reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    FOR             reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    WRITE           reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    READ            reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    END             reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)
    ;               reduce using rule 42 (COMANDO -> FOR FOR_PARAMS DO BLOCO .)


state 100

    (47) FOR_PARAMS -> ID ATRIBUICAO PARAMETRO . TO PARAMETRO

    TO              shift and go to state 114


state 101

    (53) EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .

    ID              reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    WHILE           reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    IF              reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    FOR             reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    WRITE           reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    READ            reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    END             reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    ;               reduce using rule 53 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)


state 102

    (34) ROTINA -> FUNCTION ID PARAM_ROTINA . : TIPO_DADO BLOCO_ROTINA

    :               shift and go to state 115


state 103

    (37) PARAM_ROTINA -> ( . CAMPOS )
    (26) CAMPOS -> . CAMPO LISTA_CAMPOS
    (29) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 51

    CAMPOS                         shift and go to state 116
    CAMPO                          shift and go to state 50

state 104

    (35) ROTINA -> PROCEDURE ID PARAM_ROTINA . BLOCO_ROTINA
    (38) BLOCO_ROTINA -> . DEF_VAR BLOCO
    (23) DEF_VAR -> .
    (24) DEF_VAR -> . VARIAVEL DEF_VAR
    (25) VARIAVEL -> . VAR CAMPOS ;

    BEGIN           reduce using rule 23 (DEF_VAR -> .)
    VAR             shift and go to state 22

    BLOCO_ROTINA                   shift and go to state 117
    DEF_VAR                        shift and go to state 118
    VARIAVEL                       shift and go to state 21

state 105

    (28) LISTA_CAMPOS -> ; CAMPO . LISTA_CAMPOS
    (27) LISTA_CAMPOS -> .
    (28) LISTA_CAMPOS -> . ; CAMPO LISTA_CAMPOS

  ! shift/reduce conflict for ; resolved as shift
    END             reduce using rule 27 (LISTA_CAMPOS -> .)
    )               reduce using rule 27 (LISTA_CAMPOS -> .)
    ;               shift and go to state 82

  ! ;               [ reduce using rule 27 (LISTA_CAMPOS -> .) ]

    LISTA_CAMPOS                   shift and go to state 119

state 106

    (29) CAMPO -> ID LISTA_ID : . TIPO_DADO
    (16) TIPO_DADO -> . INTEGER
    (17) TIPO_DADO -> . REAL
    (18) TIPO_DADO -> . CHAR
    (19) TIPO_DADO -> . BOOLEAN
    (20) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD CAMPOS END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 87
    REAL            shift and go to state 88
    CHAR            shift and go to state 89
    BOOLEAN         shift and go to state 90
    ARRAY           shift and go to state 91
    RECORD          shift and go to state 92
    ID              shift and go to state 85

    TIPO_DADO                      shift and go to state 120

state 107

    (31) LISTA_ID -> , ID . LISTA_ID
    (30) LISTA_ID -> .
    (31) LISTA_ID -> . , ID LISTA_ID

    :               reduce using rule 30 (LISTA_ID -> .)
    ,               shift and go to state 84

    LISTA_ID                       shift and go to state 121

state 108

    (15) TIPO -> TYPE ID = TIPO_DADO ; .

    TYPE            reduce using rule 15 (TIPO -> TYPE ID = TIPO_DADO ; .)
    VAR             reduce using rule 15 (TIPO -> TYPE ID = TIPO_DADO ; .)
    FUNCTION        reduce using rule 15 (TIPO -> TYPE ID = TIPO_DADO ; .)
    PROCEDURE       reduce using rule 15 (TIPO -> TYPE ID = TIPO_DADO ; .)
    BEGIN           reduce using rule 15 (TIPO -> TYPE ID = TIPO_DADO ; .)


state 109

    (20) TIPO_DADO -> ARRAY [ . NUMERO ] OF TIPO_DADO

    NUMERO          shift and go to state 122


state 110

    (21) TIPO_DADO -> RECORD CAMPOS . END

    END             shift and go to state 123


state 111

    (4) LISTA_COM_RESTO -> ; COMANDO LISTA_COM_RESTO .

    END             reduce using rule 4 (LISTA_COM_RESTO -> ; COMANDO LISTA_COM_RESTO .)


state 112

    (41) COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .

    ID              reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    WHILE           reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    IF              reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    FOR             reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    WRITE           reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    READ            reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    END             reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)
    ;               reduce using rule 41 (COMANDO -> IF EXP_LOGICA THEN BLOCO alternativa_else .)


state 113

    (45) alternativa_else -> ELSE . BLOCO
    (6) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 124

state 114

    (47) FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO . PARAMETRO
    (64) PARAMETRO -> . ID
    (65) PARAMETRO -> . NUMERO
    (66) PARAMETRO -> . FALSE
    (67) PARAMETRO -> . TRUE

    ID              shift and go to state 32
    NUMERO          shift and go to state 33
    FALSE           shift and go to state 34
    TRUE            shift and go to state 35

    PARAMETRO                      shift and go to state 125

state 115

    (34) ROTINA -> FUNCTION ID PARAM_ROTINA : . TIPO_DADO BLOCO_ROTINA
    (16) TIPO_DADO -> . INTEGER
    (17) TIPO_DADO -> . REAL
    (18) TIPO_DADO -> . CHAR
    (19) TIPO_DADO -> . BOOLEAN
    (20) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD CAMPOS END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 87
    REAL            shift and go to state 88
    CHAR            shift and go to state 89
    BOOLEAN         shift and go to state 90
    ARRAY           shift and go to state 91
    RECORD          shift and go to state 92
    ID              shift and go to state 85

    TIPO_DADO                      shift and go to state 126

state 116

    (37) PARAM_ROTINA -> ( CAMPOS . )

    )               shift and go to state 127


state 117

    (35) ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .

    FUNCTION        reduce using rule 35 (ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .)
    PROCEDURE       reduce using rule 35 (ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .)
    BEGIN           reduce using rule 35 (ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .)


state 118

    (38) BLOCO_ROTINA -> DEF_VAR . BLOCO
    (6) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 128

state 119

    (28) LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .

    ;               reduce using rule 28 (LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .)
    END             reduce using rule 28 (LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .)
    )               reduce using rule 28 (LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .)


state 120

    (29) CAMPO -> ID LISTA_ID : TIPO_DADO .

    ;               reduce using rule 29 (CAMPO -> ID LISTA_ID : TIPO_DADO .)
    END             reduce using rule 29 (CAMPO -> ID LISTA_ID : TIPO_DADO .)
    )               reduce using rule 29 (CAMPO -> ID LISTA_ID : TIPO_DADO .)


state 121

    (31) LISTA_ID -> , ID LISTA_ID .

    :               reduce using rule 31 (LISTA_ID -> , ID LISTA_ID .)


state 122

    (20) TIPO_DADO -> ARRAY [ NUMERO . ] OF TIPO_DADO

    ]               shift and go to state 129


state 123

    (21) TIPO_DADO -> RECORD CAMPOS END .

    ;               reduce using rule 21 (TIPO_DADO -> RECORD CAMPOS END .)
    END             reduce using rule 21 (TIPO_DADO -> RECORD CAMPOS END .)
    )               reduce using rule 21 (TIPO_DADO -> RECORD CAMPOS END .)
    VAR             reduce using rule 21 (TIPO_DADO -> RECORD CAMPOS END .)
    BEGIN           reduce using rule 21 (TIPO_DADO -> RECORD CAMPOS END .)


state 124

    (45) alternativa_else -> ELSE BLOCO .

    ID              reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    WHILE           reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    IF              reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    FOR             reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    WRITE           reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    READ            reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    END             reduce using rule 45 (alternativa_else -> ELSE BLOCO .)
    ;               reduce using rule 45 (alternativa_else -> ELSE BLOCO .)


state 125

    (47) FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO PARAMETRO .

    DO              reduce using rule 47 (FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO PARAMETRO .)


state 126

    (34) ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO . BLOCO_ROTINA
    (38) BLOCO_ROTINA -> . DEF_VAR BLOCO
    (23) DEF_VAR -> .
    (24) DEF_VAR -> . VARIAVEL DEF_VAR
    (25) VARIAVEL -> . VAR CAMPOS ;

    BEGIN           reduce using rule 23 (DEF_VAR -> .)
    VAR             shift and go to state 22

    BLOCO_ROTINA                   shift and go to state 130
    DEF_VAR                        shift and go to state 118
    VARIAVEL                       shift and go to state 21

state 127

    (37) PARAM_ROTINA -> ( CAMPOS ) .

    :               reduce using rule 37 (PARAM_ROTINA -> ( CAMPOS ) .)
    VAR             reduce using rule 37 (PARAM_ROTINA -> ( CAMPOS ) .)
    BEGIN           reduce using rule 37 (PARAM_ROTINA -> ( CAMPOS ) .)


state 128

    (38) BLOCO_ROTINA -> DEF_VAR BLOCO .

    FUNCTION        reduce using rule 38 (BLOCO_ROTINA -> DEF_VAR BLOCO .)
    PROCEDURE       reduce using rule 38 (BLOCO_ROTINA -> DEF_VAR BLOCO .)
    BEGIN           reduce using rule 38 (BLOCO_ROTINA -> DEF_VAR BLOCO .)


state 129

    (20) TIPO_DADO -> ARRAY [ NUMERO ] . OF TIPO_DADO

    OF              shift and go to state 131


state 130

    (34) ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .

    FUNCTION        reduce using rule 34 (ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .)
    PROCEDURE       reduce using rule 34 (ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .)
    BEGIN           reduce using rule 34 (ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .)


state 131

    (20) TIPO_DADO -> ARRAY [ NUMERO ] OF . TIPO_DADO
    (16) TIPO_DADO -> . INTEGER
    (17) TIPO_DADO -> . REAL
    (18) TIPO_DADO -> . CHAR
    (19) TIPO_DADO -> . BOOLEAN
    (20) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (21) TIPO_DADO -> . RECORD CAMPOS END
    (22) TIPO_DADO -> . ID

    INTEGER         shift and go to state 87
    REAL            shift and go to state 88
    CHAR            shift and go to state 89
    BOOLEAN         shift and go to state 90
    ARRAY           shift and go to state 91
    RECORD          shift and go to state 92
    ID              shift and go to state 85

    TIPO_DADO                      shift and go to state 132

state 132

    (20) TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .

    ;               reduce using rule 20 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    END             reduce using rule 20 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    )               reduce using rule 20 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    VAR             reduce using rule 20 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    BEGIN           reduce using rule 20 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 50 resolved as shift
WARNING: shift/reduce conflict for ; in state 105 resolved as shift
