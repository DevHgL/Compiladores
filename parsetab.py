
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND ARRAY ASSIGNMENT BEGIN BOOLEAN CHAR COMP_OP CONST DO ELSE END EQUAL FALSE FOR FUNCTION GREATER_EQUAL GREATER_THAN ID IF INTEGER LESS_EQUAL LESS_THAN NOT_EQUALS NUMBER OF OR PROCEDURE READ REAL RECORD STRING THEN TO TRUE TYPE VAR WHILE WRITEPROGRAM : DECLARATIONS BLOCKBLOCK : BEGIN COMMAND_LIST END\n             | BEGIN ENDDECLARATIONS : CONST_DEF TYPE_DEF VAR_DEF ROUTINE_DEFCONST_DEF : CONSTANT CONST_DEF\n                 | TYPE_DEF : TYPE_DECLARATION TYPE_DEF\n                | VAR_DEF : VARIABLE VAR_DEF\n               | ROUTINE_DEF : ROUTINE ROUTINE_DEF\n                   | CONSTANT : CONST ID '=' CONST_VALUE ';'CONST_VALUE : STRING\n                   | CONST_EXPCONST_EXP : NUMBER\n                 | '(' CONST_EXP ')'\n                 | CONST_EXP '+' CONST_EXP\n                 | CONST_EXP '-' CONST_EXP\n                 | CONST_EXP '*' CONST_EXP\n                 | CONST_EXP '/' CONST_EXPTYPE_DECLARATION : TYPE ID '=' DATA_TYPE ';'VARIABLE : VAR FIELD ';'ID_LIST : ',' ID ID_LIST\n               | FIELDS : FIELD FIELD_LISTFIELD : ID ID_LIST ':' DATA_TYPEFIELD_LIST : ';' FIELD FIELD_LIST\n                  | DATA_TYPE : INTEGER\n                | REAL\n                | CHAR\n                | BOOLEAN\n                | ARRAY '[' NUMBER ']' OF DATA_TYPE\n                | RECORD FIELDS END\n                | IDROUTINE : FUNCTION ID ROUTINE_PARAM ':' DATA_TYPE ROUTINE_BLOCK\n               | PROCEDURE ID ROUTINE_PARAM ROUTINE_BLOCKROUTINE_PARAM : '(' FIELDS ')'\n                     | ROUTINE_BLOCK : VAR_DEF BLOCKCOMMAND_LIST : COMMAND\n                    | COMMAND_LIST ';' COMMANDCOMMAND : ID ASSIGNMENT EXP\n               | WHILE COM_EXP DO COMMAND\n               | IF COM_EXP THEN COMMAND ELSE COMMAND\n               | FOR ID ASSIGNMENT CONST_VALUE TO CONST_VALUE DO COMMANDEXP : EXP '+' EXP\n           | EXP '-' EXP\n           | EXP '*' EXP\n           | EXP '/' EXP\n           | '(' EXP ')'\n           | ID\n           | NUMBERCOM_EXP : EXP COMP_OP EXP"
    
_lr_action_items = {'TYPE':([0,3,4,9,11,74,94,],[-6,10,-6,10,-5,-13,-22,]),'VAR':([0,3,4,8,9,11,21,23,62,63,66,68,69,70,71,74,91,94,112,117,118,127,],[-6,-8,-6,22,-8,-5,22,-7,-40,-23,-36,-30,-31,-32,-33,-13,22,-22,-35,22,-39,-34,]),'FUNCTION':([0,3,4,8,9,11,14,20,21,23,26,37,40,63,74,94,107,119,123,],[-6,-8,-6,-10,-8,-5,-3,38,-10,-7,-2,38,-9,-23,-13,-22,-38,-41,-37,]),'PROCEDURE':([0,3,4,8,9,11,14,20,21,23,26,37,40,63,74,94,107,119,123,],[-6,-8,-6,-10,-8,-5,-3,39,-10,-7,-2,39,-9,-23,-13,-22,-38,-41,-37,]),'BEGIN':([0,2,3,4,8,9,11,14,20,21,23,26,36,37,40,60,62,63,66,68,69,70,71,74,91,94,107,108,112,117,118,119,123,127,],[-6,7,-8,-6,-10,-8,-5,-3,-12,-10,-7,-2,-4,-12,-9,-11,-40,-23,-36,-30,-31,-32,-33,-13,-10,-22,-38,7,-35,-10,-39,-41,-37,-34,]),'CONST':([0,4,74,],[5,5,-13,]),'$end':([1,6,14,26,],[0,-1,-3,-2,]),'ID':([5,7,10,17,18,19,22,27,28,31,38,39,43,51,52,53,54,55,56,58,65,73,90,92,103,105,114,122,124,],[12,16,24,32,32,35,42,16,32,32,61,62,66,16,32,32,32,32,32,16,93,42,42,66,16,66,42,16,66,]),'END':([7,13,15,32,33,49,50,66,68,69,70,71,80,82,83,84,85,86,96,97,109,112,113,115,121,125,126,127,],[14,26,-42,-53,-54,-43,-44,-36,-30,-31,-32,-33,-45,-48,-49,-50,-51,-52,112,-29,-27,-35,-26,-46,-29,-28,-47,-34,]),'WHILE':([7,27,51,58,103,122,],[17,17,17,17,17,17,]),'IF':([7,27,51,58,103,122,],[18,18,18,18,18,18,]),'FOR':([7,27,51,58,103,122,],[19,19,19,19,19,19,]),'=':([12,24,],[25,43,]),';':([13,15,32,33,41,44,45,46,47,49,50,66,67,68,69,70,71,80,82,83,84,85,86,97,98,99,100,101,102,109,112,115,121,126,127,],[27,-42,-53,-54,63,74,-14,-15,-16,-43,-44,-36,94,-30,-31,-32,-33,-45,-48,-49,-50,-51,-52,114,-18,-19,-20,-21,-17,-27,-35,-46,114,-47,-34,]),'ASSIGNMENT':([16,35,],[28,59,]),'(':([17,18,25,28,31,48,52,53,54,55,56,59,61,62,75,76,77,78,104,],[31,31,48,31,31,48,31,31,31,31,31,48,90,90,48,48,48,48,48,]),'NUMBER':([17,18,25,28,31,48,52,53,54,55,56,59,75,76,77,78,95,104,],[33,33,47,33,33,47,33,33,33,33,33,47,47,47,47,47,111,47,]),'STRING':([25,59,104,],[45,45,45,]),'DO':([29,32,33,45,46,47,81,82,83,84,85,86,98,99,100,101,102,116,],[51,-53,-54,-14,-15,-16,-55,-48,-49,-50,-51,-52,-18,-19,-20,-21,-17,122,]),'COMP_OP':([30,32,33,82,83,84,85,86,],[52,-53,-54,-48,-49,-50,-51,-52,]),'+':([30,32,33,46,47,50,57,79,81,82,83,84,85,86,98,99,100,101,102,],[53,-53,-54,75,-16,53,53,75,53,53,53,53,53,-52,75,75,75,75,-17,]),'-':([30,32,33,46,47,50,57,79,81,82,83,84,85,86,98,99,100,101,102,],[54,-53,-54,76,-16,54,54,76,54,54,54,54,54,-52,76,76,76,76,-17,]),'*':([30,32,33,46,47,50,57,79,81,82,83,84,85,86,98,99,100,101,102,],[55,-53,-54,77,-16,55,55,77,55,55,55,55,55,-52,77,77,77,77,-17,]),'/':([30,32,33,46,47,50,57,79,81,82,83,84,85,86,98,99,100,101,102,],[56,-53,-54,78,-16,56,56,78,56,56,56,56,56,-52,78,78,78,78,-17,]),'ELSE':([32,33,50,80,82,83,84,85,86,87,115,126,],[-53,-54,-44,-45,-48,-49,-50,-51,-52,103,-46,-47,]),')':([32,33,47,57,66,68,69,70,71,79,82,83,84,85,86,97,98,99,100,101,102,106,109,112,113,121,125,127,],[-53,-54,-16,86,-36,-30,-31,-32,-33,102,-48,-49,-50,-51,-52,-29,-18,-19,-20,-21,-17,118,-27,-35,-26,-29,-28,-34,]),'THEN':([32,33,34,81,82,83,84,85,86,],[-53,-54,58,-55,-48,-49,-50,-51,-52,]),',':([42,93,],[65,65,]),':':([42,61,64,89,93,110,118,],[-25,-40,92,105,-25,-24,-39,]),'INTEGER':([43,92,105,124,],[68,68,68,68,]),'REAL':([43,92,105,124,],[69,69,69,69,]),'CHAR':([43,92,105,124,],[70,70,70,70,]),'BOOLEAN':([43,92,105,124,],[71,71,71,71,]),'ARRAY':([43,92,105,124,],[72,72,72,72,]),'RECORD':([43,92,105,124,],[73,73,73,73,]),'TO':([45,46,47,88,98,99,100,101,102,],[-14,-15,-16,104,-18,-19,-20,-21,-17,]),'[':([72,],[95,]),']':([111,],[120,]),'OF':([120,],[124,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'DECLARATIONS':([0,],[2,]),'CONST_DEF':([0,4,],[3,11,]),'CONSTANT':([0,4,],[4,4,]),'BLOCK':([2,108,],[6,119,]),'TYPE_DEF':([3,9,],[8,23,]),'TYPE_DECLARATION':([3,9,],[9,9,]),'COMMAND_LIST':([7,],[13,]),'COMMAND':([7,27,51,58,103,122,],[15,49,80,87,115,126,]),'VAR_DEF':([8,21,91,117,],[20,40,108,108,]),'VARIABLE':([8,21,91,117,],[21,21,21,21,]),'COM_EXP':([17,18,],[29,34,]),'EXP':([17,18,28,31,52,53,54,55,56,],[30,30,50,57,81,82,83,84,85,]),'ROUTINE_DEF':([20,37,],[36,60,]),'ROUTINE':([20,37,],[37,37,]),'FIELD':([22,73,90,114,],[41,97,97,121,]),'CONST_VALUE':([25,59,104,],[44,88,116,]),'CONST_EXP':([25,48,59,75,76,77,78,104,],[46,79,46,98,99,100,101,46,]),'ID_LIST':([42,93,],[64,110,]),'DATA_TYPE':([43,92,105,124,],[67,109,117,127,]),'ROUTINE_PARAM':([61,62,],[89,91,]),'FIELDS':([73,90,],[96,106,]),'ROUTINE_BLOCK':([91,117,],[107,123,]),'FIELD_LIST':([97,121,],[113,125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> DECLARATIONS BLOCK','PROGRAM',2,'p_program','syntactic.py',15),
  ('BLOCK -> BEGIN COMMAND_LIST END','BLOCK',3,'p_block','syntactic.py',19),
  ('BLOCK -> BEGIN END','BLOCK',2,'p_block','syntactic.py',20),
  ('DECLARATIONS -> CONST_DEF TYPE_DEF VAR_DEF ROUTINE_DEF','DECLARATIONS',4,'p_declarations','syntactic.py',27),
  ('CONST_DEF -> CONSTANT CONST_DEF','CONST_DEF',2,'p_const_def','syntactic.py',31),
  ('CONST_DEF -> <empty>','CONST_DEF',0,'p_const_def','syntactic.py',32),
  ('TYPE_DEF -> TYPE_DECLARATION TYPE_DEF','TYPE_DEF',2,'p_type_def','syntactic.py',39),
  ('TYPE_DEF -> <empty>','TYPE_DEF',0,'p_type_def','syntactic.py',40),
  ('VAR_DEF -> VARIABLE VAR_DEF','VAR_DEF',2,'p_var_def','syntactic.py',47),
  ('VAR_DEF -> <empty>','VAR_DEF',0,'p_var_def','syntactic.py',48),
  ('ROUTINE_DEF -> ROUTINE ROUTINE_DEF','ROUTINE_DEF',2,'p_routine_def','syntactic.py',55),
  ('ROUTINE_DEF -> <empty>','ROUTINE_DEF',0,'p_routine_def','syntactic.py',56),
  ('CONSTANT -> CONST ID = CONST_VALUE ;','CONSTANT',5,'p_constant','syntactic.py',63),
  ('CONST_VALUE -> STRING','CONST_VALUE',1,'p_const_value','syntactic.py',67),
  ('CONST_VALUE -> CONST_EXP','CONST_VALUE',1,'p_const_value','syntactic.py',68),
  ('CONST_EXP -> NUMBER','CONST_EXP',1,'p_const_exp','syntactic.py',73),
  ('CONST_EXP -> ( CONST_EXP )','CONST_EXP',3,'p_const_exp','syntactic.py',74),
  ('CONST_EXP -> CONST_EXP + CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',75),
  ('CONST_EXP -> CONST_EXP - CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',76),
  ('CONST_EXP -> CONST_EXP * CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',77),
  ('CONST_EXP -> CONST_EXP / CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',78),
  ('TYPE_DECLARATION -> TYPE ID = DATA_TYPE ;','TYPE_DECLARATION',5,'p_type_declaration','syntactic.py',88),
  ('VARIABLE -> VAR FIELD ;','VARIABLE',3,'p_variable','syntactic.py',92),
  ('ID_LIST -> , ID ID_LIST','ID_LIST',3,'p_id_list','syntactic.py',96),
  ('ID_LIST -> <empty>','ID_LIST',0,'p_id_list','syntactic.py',97),
  ('FIELDS -> FIELD FIELD_LIST','FIELDS',2,'p_fields','syntactic.py',104),
  ('FIELD -> ID ID_LIST : DATA_TYPE','FIELD',4,'p_field','syntactic.py',108),
  ('FIELD_LIST -> ; FIELD FIELD_LIST','FIELD_LIST',3,'p_field_list','syntactic.py',112),
  ('FIELD_LIST -> <empty>','FIELD_LIST',0,'p_field_list','syntactic.py',113),
  ('DATA_TYPE -> INTEGER','DATA_TYPE',1,'p_data_type','syntactic.py',120),
  ('DATA_TYPE -> REAL','DATA_TYPE',1,'p_data_type','syntactic.py',121),
  ('DATA_TYPE -> CHAR','DATA_TYPE',1,'p_data_type','syntactic.py',122),
  ('DATA_TYPE -> BOOLEAN','DATA_TYPE',1,'p_data_type','syntactic.py',123),
  ('DATA_TYPE -> ARRAY [ NUMBER ] OF DATA_TYPE','DATA_TYPE',6,'p_data_type','syntactic.py',124),
  ('DATA_TYPE -> RECORD FIELDS END','DATA_TYPE',3,'p_data_type','syntactic.py',125),
  ('DATA_TYPE -> ID','DATA_TYPE',1,'p_data_type','syntactic.py',126),
  ('ROUTINE -> FUNCTION ID ROUTINE_PARAM : DATA_TYPE ROUTINE_BLOCK','ROUTINE',6,'p_routine','syntactic.py',137),
  ('ROUTINE -> PROCEDURE ID ROUTINE_PARAM ROUTINE_BLOCK','ROUTINE',4,'p_routine','syntactic.py',138),
  ('ROUTINE_PARAM -> ( FIELDS )','ROUTINE_PARAM',3,'p_routine_param','syntactic.py',145),
  ('ROUTINE_PARAM -> <empty>','ROUTINE_PARAM',0,'p_routine_param','syntactic.py',146),
  ('ROUTINE_BLOCK -> VAR_DEF BLOCK','ROUTINE_BLOCK',2,'p_routine_block','syntactic.py',153),
  ('COMMAND_LIST -> COMMAND','COMMAND_LIST',1,'p_command_list','syntactic.py',157),
  ('COMMAND_LIST -> COMMAND_LIST ; COMMAND','COMMAND_LIST',3,'p_command_list','syntactic.py',158),
  ('COMMAND -> ID ASSIGNMENT EXP','COMMAND',3,'p_command','syntactic.py',165),
  ('COMMAND -> WHILE COM_EXP DO COMMAND','COMMAND',4,'p_command','syntactic.py',166),
  ('COMMAND -> IF COM_EXP THEN COMMAND ELSE COMMAND','COMMAND',6,'p_command','syntactic.py',167),
  ('COMMAND -> FOR ID ASSIGNMENT CONST_VALUE TO CONST_VALUE DO COMMAND','COMMAND',8,'p_command','syntactic.py',168),
  ('EXP -> EXP + EXP','EXP',3,'p_exp','syntactic.py',179),
  ('EXP -> EXP - EXP','EXP',3,'p_exp','syntactic.py',180),
  ('EXP -> EXP * EXP','EXP',3,'p_exp','syntactic.py',181),
  ('EXP -> EXP / EXP','EXP',3,'p_exp','syntactic.py',182),
  ('EXP -> ( EXP )','EXP',3,'p_exp','syntactic.py',183),
  ('EXP -> ID','EXP',1,'p_exp','syntactic.py',184),
  ('EXP -> NUMBER','EXP',1,'p_exp','syntactic.py',185),
  ('COM_EXP -> EXP COMP_OP EXP','COM_EXP',3,'p_com_exp','syntactic.py',194),
]
