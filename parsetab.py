
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN ATRIB BEGIN BOOLEAN CHAR COLON COMMA CONST DIVIDE DO DOT ELSE END EQUALS FALSE FOR FUNCTION GREATER_EQUAL GREATER_THAN ID IF INTEGER LBRACE LBRACKET LESS_EQUAL LESS_THAN LPAREN MINUS NOT_EQUALS NUMBER OF OR PLUS PROCEDURE PROGRAM RBRACE RBRACKET READ REAL RECORD RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE VAR WHILE WRITEprogram : PROGRAM lista_declaracoes BEGIN lista_com ENDlista_declaracoes : declaracoes lista_declaracoes\n                         | emptydeclaracoes : CONST lista_const\n                   | VAR lista_var\n                   | TYPE lista_tipo\n                   | emptylista_const : ID ATRIB NUMBER SEMICOLON lista_const\n                   | emptylista_var : ID COLON tipo SEMICOLON lista_var\n                 | emptytipo : INTEGER\n            | REAL\n            | CHAR\n            | BOOLEANlista_tipo : ID ATRIB tipo SEMICOLON lista_tipo\n                  | emptybloco : BEGIN lista_com ENDlista_com : comando SEMICOLON lista_com\n                 | emptycomando : atribuicao\n               | leitura\n               | escritaatribuicao : ID ASSIGN NUMBERleitura : READ LPAREN ID RPARENescrita : WRITE LPAREN STRING RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,32,],[0,-1,]),'CONST':([2,4,5,6,7,8,11,13,14,16,17,19,48,49,50,53,54,55,],[6,6,-7,-27,-27,-27,-4,-9,-5,-11,-6,-17,-27,-27,-27,-8,-10,-16,]),'VAR':([2,4,5,6,7,8,11,13,14,16,17,19,48,49,50,53,54,55,],[7,7,-7,-27,-27,-27,-4,-9,-5,-11,-6,-17,-27,-27,-27,-8,-10,-16,]),'TYPE':([2,4,5,6,7,8,11,13,14,16,17,19,48,49,50,53,54,55,],[8,8,-7,-27,-27,-27,-4,-9,-5,-11,-6,-17,-27,-27,-27,-8,-10,-16,]),'BEGIN':([2,3,4,5,6,7,8,10,11,13,14,16,17,19,48,49,50,53,54,55,],[-27,9,-27,-3,-27,-27,-27,-2,-4,-9,-5,-11,-6,-17,-27,-27,-27,-8,-10,-16,]),'ID':([6,7,8,9,33,35,48,49,50,],[12,15,18,26,26,46,12,15,18,]),'END':([9,20,22,33,44,],[-27,32,-20,-27,-19,]),'READ':([9,33,],[27,27,]),'WRITE':([9,33,],[28,28,]),'ATRIB':([12,18,],[29,31,]),'COLON':([15,],[30,]),'SEMICOLON':([21,23,24,25,37,38,39,40,41,42,43,45,51,52,],[33,-21,-22,-23,48,49,-12,-13,-14,-15,50,-24,-25,-26,]),'ASSIGN':([26,],[34,]),'LPAREN':([27,28,],[35,36,]),'NUMBER':([29,34,],[37,45,]),'INTEGER':([30,31,],[39,39,]),'REAL':([30,31,],[40,40,]),'CHAR':([30,31,],[41,41,]),'BOOLEAN':([30,31,],[42,42,]),'STRING':([36,],[47,]),'RPAREN':([46,47,],[51,52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'lista_declaracoes':([2,4,],[3,10,]),'declaracoes':([2,4,],[4,4,]),'empty':([2,4,6,7,8,9,33,48,49,50,],[5,5,13,16,19,22,22,13,16,19,]),'lista_const':([6,48,],[11,53,]),'lista_var':([7,49,],[14,54,]),'lista_tipo':([8,50,],[17,55,]),'lista_com':([9,33,],[20,44,]),'comando':([9,33,],[21,21,]),'atribuicao':([9,33,],[23,23,]),'leitura':([9,33,],[24,24,]),'escrita':([9,33,],[25,25,]),'tipo':([30,31,],[38,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM lista_declaracoes BEGIN lista_com END','program',5,'p_program','analisador_sintatico.py',6),
  ('lista_declaracoes -> declaracoes lista_declaracoes','lista_declaracoes',2,'p_lista_declaracoes','analisador_sintatico.py',10),
  ('lista_declaracoes -> empty','lista_declaracoes',1,'p_lista_declaracoes','analisador_sintatico.py',11),
  ('declaracoes -> CONST lista_const','declaracoes',2,'p_declaracoes','analisador_sintatico.py',15),
  ('declaracoes -> VAR lista_var','declaracoes',2,'p_declaracoes','analisador_sintatico.py',16),
  ('declaracoes -> TYPE lista_tipo','declaracoes',2,'p_declaracoes','analisador_sintatico.py',17),
  ('declaracoes -> empty','declaracoes',1,'p_declaracoes','analisador_sintatico.py',18),
  ('lista_const -> ID ATRIB NUMBER SEMICOLON lista_const','lista_const',5,'p_lista_const','analisador_sintatico.py',22),
  ('lista_const -> empty','lista_const',1,'p_lista_const','analisador_sintatico.py',23),
  ('lista_var -> ID COLON tipo SEMICOLON lista_var','lista_var',5,'p_lista_var','analisador_sintatico.py',27),
  ('lista_var -> empty','lista_var',1,'p_lista_var','analisador_sintatico.py',28),
  ('tipo -> INTEGER','tipo',1,'p_tipo','analisador_sintatico.py',32),
  ('tipo -> REAL','tipo',1,'p_tipo','analisador_sintatico.py',33),
  ('tipo -> CHAR','tipo',1,'p_tipo','analisador_sintatico.py',34),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo','analisador_sintatico.py',35),
  ('lista_tipo -> ID ATRIB tipo SEMICOLON lista_tipo','lista_tipo',5,'p_lista_tipo','analisador_sintatico.py',39),
  ('lista_tipo -> empty','lista_tipo',1,'p_lista_tipo','analisador_sintatico.py',40),
  ('bloco -> BEGIN lista_com END','bloco',3,'p_bloco','analisador_sintatico.py',44),
  ('lista_com -> comando SEMICOLON lista_com','lista_com',3,'p_lista_com','analisador_sintatico.py',48),
  ('lista_com -> empty','lista_com',1,'p_lista_com','analisador_sintatico.py',49),
  ('comando -> atribuicao','comando',1,'p_comando','analisador_sintatico.py',53),
  ('comando -> leitura','comando',1,'p_comando','analisador_sintatico.py',54),
  ('comando -> escrita','comando',1,'p_comando','analisador_sintatico.py',55),
  ('atribuicao -> ID ASSIGN NUMBER','atribuicao',3,'p_atribuicao','analisador_sintatico.py',59),
  ('leitura -> READ LPAREN ID RPAREN','leitura',4,'p_leitura','analisador_sintatico.py',63),
  ('escrita -> WRITE LPAREN STRING RPAREN','escrita',4,'p_escrita','analisador_sintatico.py',67),
  ('empty -> <empty>','empty',0,'p_empty','analisador_sintatico.py',72),
]
