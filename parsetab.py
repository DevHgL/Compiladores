
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND ARRAY ASSIGNMENT BEGIN BOOLEAN CHAR COMPARATOR COMPARATOR CONST DO ELSE END EQUAL FALSE FOR FUNCTION GREATER_EQUAL GREATER_THAN ID IF INTEGER LESS_EQUAL LESS_THAN NOT_EQUALS NUMBER OF OR PROCEDURE READ REAL RECORD STRING THEN TO TRUE TYPE VAR WHILE WRITEPROGRAM : DECLARATIONS BLOCKBLOCK : BEGIN COMMAND COMMAND_LIST ENDDECLARATIONS : CONST_DEF TYPE_DEF VAR_DEF ROUTINE_DEFCONST_DEF : CONSTANT CONST_DEF\n                 | TYPE_DEF : TYPE_DECLARATION TYPE_DEF\n                | VAR_DEF : VARIABLE VAR_DEF\n               | ROUTINE_DEF : ROUTINE ROUTINE_DEF\n                   | CONSTANT : CONST ID '=' CONST_VALUE ';'CONST_VALUE : STRING\n                   | CONST_EXPTYPE_DECLARATION : TYPE ID '=' DATA_TYPE ';'VARIABLE : VAR FIELD ';'ID_LIST : ',' ID ID_LIST\n               | FIELDS : FIELD FIELD_LISTFIELD : ID ID_LIST ':' DATA_TYPEFIELD_LIST : ';' FIELD FIELD_LIST\n                  | DATA_TYPE : INTEGER\n                | REAL\n                | CHAR\n                | BOOLEAN\n                | ARRAY '[' NUMBER ']' OF DATA_TYPE\n                | RECORD FIELDS END\n                | IDROUTINE : FUNCTION ID ROUTINE_PARAM ':' DATA_TYPE ROUTINE_BLOCK\n               | PROCEDURE ID ROUTINE_PARAM ROUTINE_BLOCKROUTINE_PARAM : '(' FIELDS ')'\n                     | ROUTINE_BLOCK : VAR_DEF BLOCKCOMMAND_LIST : ';' COMMAND COMMAND_LIST\n                    | COMMAND_BLOCK : BLOCK\n                    | COMMANDCOMMAND : ID NAME ASSIGN_EXPRESSION\n               | WHILE COM_EXP DO COMMAND_BLOCK\n               | IF COM_EXP THEN COMMAND_BLOCK ELSE_ALTERNATIVE\n               | FOR FOR_COMMAND DO COMMAND_BLOCK\n               | WRITE CONST_VALUE\n               | READ ID NAMEASSIGN_EXPRESSION : ASSIGNMENT EXPFOR_COMMAND : ID ASSIGNMENT_STMT TO PARAMETERELSE_ALTERNATIVE : ELSE COMMAND_BLOCK\n                       | ASSIGNMENT_STMT : ASSIGNMENT EXPPARAM_LIST : PARAMETER ',' PARAM_LIST\n                  | PARAMETER\n                  | EXP : PARAMETER\n           | EXP '+' EXP\n           | EXP '-' EXP\n           | '(' EXP ')'\n           | EXP '*' EXP\n           | EXP '/' EXPEXP_L1 : MATH_OP EXP\n              | LOGIC_PARAM LOGIC_EXP\n              | LOGIC_EXP : LOGIC_OP EXP\n                 | LOGIC_PARAM : COMP_OP PARAMETER\n                   | EXP_L2 : MATH_OP EXP ')'\n              | LOGIC_PARAM LOGIC_OP EXP ')'CONST_EXP : PARAMETER CONST_EXP_L\n                 | '(' PARAMETER MATH_OP CONST_EXP ')'CONST_EXP_L : MATH_OP CONST_EXP\n                   | COM_EXP : PARAMETER LOGIC_PARAM COM_EXP_L\n               | '(' PARAMETER LOGIC_PARAM LOGIC_OP COM_EXP ')'COM_EXP_L : LOGIC_OP COM_EXP\n                 | PARAMETER : ID NAME\n                | NUMBER\n                | FALSE\n                | TRUELOGIC_OP : AND\n                | ORCOMP_OP : LESS_THAN\n               | GREATER_THAN\n               | LESS_EQUAL\n               | GREATER_EQUAL\n               | EQUAL\n               | NOT_EQUALSMATH_OP : '+'\n               | '-'\n               | '*'\n               | '/'NAME : '.' ID NAME\n           | '[' PARAMETER ']'\n           | '(' PARAM_LIST ')'\n           | "
    
_lr_action_items = {'TYPE':([0,3,4,9,11,102,131,],[-5,10,-5,10,-4,-12,-15,]),'VAR':([0,3,4,8,9,11,21,23,90,91,94,96,97,98,99,102,128,131,154,165,166,174,],[-5,-7,-5,22,-7,-4,22,-6,-33,-16,-29,-23,-24,-25,-26,-12,22,-15,-28,22,-32,-27,]),'FUNCTION':([0,3,4,8,9,11,20,21,23,49,52,57,91,102,131,149,167,171,],[-5,-7,-5,-9,-7,-4,50,-9,-6,50,-8,-2,-16,-12,-15,-31,-34,-30,]),'PROCEDURE':([0,3,4,8,9,11,20,21,23,49,52,57,91,102,131,149,167,171,],[-5,-7,-5,-9,-7,-4,51,-9,-6,51,-8,-2,-16,-12,-15,-31,-34,-30,]),'BEGIN':([0,2,3,4,8,9,11,20,21,23,48,49,52,57,65,76,77,88,90,91,94,96,97,98,99,102,128,131,144,149,150,154,165,166,167,171,174,],[-5,7,-7,-5,-9,-7,-4,-11,-9,-6,-3,-11,-8,-2,7,7,7,-10,-33,-16,-29,-23,-24,-25,-26,-12,-9,-15,7,-31,7,-28,-9,-32,-34,-30,-27,]),'CONST':([0,4,102,],[5,5,-12,]),'$end':([1,6,57,],[0,-1,-2,]),'ID':([5,7,10,15,16,17,18,19,22,25,27,29,30,31,34,46,50,51,55,60,65,67,68,69,70,71,72,73,76,77,79,81,82,83,84,85,93,101,106,110,115,116,117,122,125,127,129,135,136,137,138,142,144,147,156,172,],[12,14,24,35,35,41,35,47,54,35,14,61,35,35,35,35,89,90,94,35,14,35,-82,-83,-84,-85,-86,-87,14,14,35,35,-88,-89,-90,-91,130,54,35,35,35,-80,-81,35,35,54,94,35,35,35,35,35,14,94,54,94,]),'WHILE':([7,27,65,76,77,144,],[15,15,15,15,15,15,]),'IF':([7,27,65,76,77,144,],[16,16,16,16,16,16,]),'FOR':([7,27,65,76,77,144,],[17,17,17,17,17,17,]),'WRITE':([7,27,65,76,77,144,],[18,18,18,18,18,18,]),'READ':([7,27,65,76,77,144,],[19,19,19,19,19,19,]),'=':([12,24,],[25,55,]),';':([13,35,36,37,38,42,43,44,45,47,53,56,57,58,59,61,75,80,87,94,95,96,97,98,99,104,105,107,108,109,111,112,113,120,121,124,134,143,151,154,157,158,159,160,161,163,164,169,174,],[27,-95,-77,-78,-79,-43,-13,-14,-71,-95,91,102,-2,27,-39,-95,-76,-68,-44,-29,131,-23,-24,-25,-26,-45,-53,-92,-93,-94,-40,-37,-38,-48,-42,-70,156,-41,-20,-28,-54,-55,-57,-58,-56,-47,-69,156,-27,]),'END':([13,26,35,36,37,38,42,43,44,45,47,57,58,59,61,75,80,87,94,96,97,98,99,103,104,105,107,108,109,111,112,113,120,121,124,133,134,143,151,154,155,157,158,159,160,161,163,164,169,173,174,],[-36,57,-95,-77,-78,-79,-43,-13,-14,-71,-95,-2,-36,-39,-95,-76,-68,-44,-29,-23,-24,-25,-26,-35,-45,-53,-92,-93,-94,-40,-37,-38,-48,-42,-70,154,-22,-41,-20,-28,-19,-54,-55,-57,-58,-56,-47,-69,-22,-21,-27,]),'.':([14,35,47,61,],[29,29,29,29,]),'[':([14,35,47,61,100,],[30,30,30,30,132,]),'(':([14,15,16,18,25,35,47,60,61,79,81,82,83,84,85,89,90,106,115,116,117,125,135,136,137,138,142,],[31,34,34,46,46,31,31,106,31,106,46,-88,-89,-90,-91,127,127,106,34,-80,-81,46,106,106,106,106,34,]),'ASSIGNMENT':([14,28,41,61,107,108,109,],[-95,60,79,-95,-92,-93,-94,]),'NUMBER':([15,16,18,25,30,31,34,46,60,67,68,69,70,71,72,73,79,81,82,83,84,85,106,110,115,116,117,122,125,132,135,136,137,138,142,],[36,36,36,36,36,36,36,36,36,36,-82,-83,-84,-85,-86,-87,36,36,-88,-89,-90,-91,36,36,36,-80,-81,36,36,153,36,36,36,36,36,]),'FALSE':([15,16,18,25,30,31,34,46,60,67,68,69,70,71,72,73,79,81,82,83,84,85,106,110,115,116,117,122,125,135,136,137,138,142,],[37,37,37,37,37,37,37,37,37,37,-82,-83,-84,-85,-86,-87,37,37,-88,-89,-90,-91,37,37,37,-80,-81,37,37,37,37,37,37,37,]),'TRUE':([15,16,18,25,30,31,34,46,60,67,68,69,70,71,72,73,79,81,82,83,84,85,106,110,115,116,117,122,125,135,136,137,138,142,],[38,38,38,38,38,38,38,38,38,38,-82,-83,-84,-85,-86,-87,38,38,-88,-89,-90,-91,38,38,38,-80,-81,38,38,38,38,38,38,38,]),'STRING':([18,25,],[43,43,]),')':([31,33,35,36,37,38,45,61,63,64,66,75,80,94,96,97,98,99,105,107,108,109,110,114,118,124,134,139,140,141,146,148,151,154,155,157,158,159,160,161,162,164,169,170,173,174,],[-52,-65,-95,-77,-78,-79,-71,-95,109,-51,-75,-76,-68,-29,-23,-24,-25,-26,-53,-92,-93,-94,-52,-72,-64,-70,-22,161,-50,-74,164,166,-20,-28,-19,-54,-55,-57,-58,-56,170,-69,-22,-73,-21,-27,]),'DO':([32,33,35,36,37,38,40,61,66,75,107,108,109,114,118,141,145,170,],[65,-65,-95,-77,-78,-79,77,-95,-75,-76,-92,-93,-94,-72,-64,-74,-46,-73,]),'AND':([33,35,36,37,38,61,66,74,75,107,108,109,118,119,],[-65,-95,-77,-78,-79,-95,116,-65,-76,-92,-93,-94,-64,116,]),'OR':([33,35,36,37,38,61,66,74,75,107,108,109,118,119,],[-65,-95,-77,-78,-79,-95,117,-65,-76,-92,-93,-94,-64,117,]),'THEN':([33,35,36,37,38,39,61,66,75,107,108,109,114,118,141,170,],[-65,-95,-77,-78,-79,76,-95,-75,-76,-92,-93,-94,-72,-64,-74,-73,]),'LESS_THAN':([33,35,36,37,38,61,74,75,107,108,109,],[68,-95,-77,-78,-79,-95,68,-76,-92,-93,-94,]),'GREATER_THAN':([33,35,36,37,38,61,74,75,107,108,109,],[69,-95,-77,-78,-79,-95,69,-76,-92,-93,-94,]),'LESS_EQUAL':([33,35,36,37,38,61,74,75,107,108,109,],[70,-95,-77,-78,-79,-95,70,-76,-92,-93,-94,]),'GREATER_EQUAL':([33,35,36,37,38,61,74,75,107,108,109,],[71,-95,-77,-78,-79,-95,71,-76,-92,-93,-94,]),'EQUAL':([33,35,36,37,38,61,74,75,107,108,109,],[72,-95,-77,-78,-79,-95,72,-76,-92,-93,-94,]),'NOT_EQUALS':([33,35,36,37,38,61,74,75,107,108,109,],[73,-95,-77,-78,-79,-95,73,-76,-92,-93,-94,]),'+':([35,36,37,38,45,61,75,86,104,105,107,108,109,123,139,157,158,159,160,161,],[-95,-77,-78,-79,82,-95,-76,82,135,-53,-92,-93,-94,135,135,135,135,135,135,-56,]),'-':([35,36,37,38,45,61,75,86,104,105,107,108,109,123,139,157,158,159,160,161,],[-95,-77,-78,-79,83,-95,-76,83,136,-53,-92,-93,-94,136,136,136,136,136,136,-56,]),'*':([35,36,37,38,45,61,75,86,104,105,107,108,109,123,139,157,158,159,160,161,],[-95,-77,-78,-79,84,-95,-76,84,137,-53,-92,-93,-94,137,137,137,137,137,137,-56,]),'/':([35,36,37,38,45,61,75,86,104,105,107,108,109,123,139,157,158,159,160,161,],[-95,-77,-78,-79,85,-95,-76,85,138,-53,-92,-93,-94,138,138,138,138,138,138,-56,]),'ELSE':([35,36,37,38,42,43,44,45,47,57,59,61,75,80,87,104,105,107,108,109,111,112,113,120,121,124,143,157,158,159,160,161,163,164,],[-95,-77,-78,-79,-43,-13,-14,-71,-95,-2,-39,-95,-76,-68,-44,-45,-53,-92,-93,-94,-40,-37,-38,144,-42,-70,-41,-54,-55,-57,-58,-56,-47,-69,]),']':([35,36,37,38,61,62,75,107,108,109,153,],[-95,-77,-78,-79,-95,108,-76,-92,-93,-94,168,]),',':([35,36,37,38,54,61,64,75,107,108,109,130,],[-95,-77,-78,-79,93,-95,110,-76,-92,-93,-94,93,]),'TO':([35,36,37,38,61,75,78,105,107,108,109,123,157,158,159,160,161,],[-95,-77,-78,-79,-95,-76,122,-53,-92,-93,-94,-49,-54,-55,-57,-58,-56,]),':':([54,89,92,126,130,152,166,],[-18,-33,129,147,-18,-17,-32,]),'INTEGER':([55,129,147,172,],[96,96,96,96,]),'REAL':([55,129,147,172,],[97,97,97,97,]),'CHAR':([55,129,147,172,],[98,98,98,98,]),'BOOLEAN':([55,129,147,172,],[99,99,99,99,]),'ARRAY':([55,129,147,172,],[100,100,100,100,]),'RECORD':([55,129,147,172,],[101,101,101,101,]),'OF':([168,],[172,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'DECLARATIONS':([0,],[2,]),'CONST_DEF':([0,4,],[3,11,]),'CONSTANT':([0,4,],[4,4,]),'BLOCK':([2,65,76,77,144,150,],[6,112,112,112,112,167,]),'TYPE_DEF':([3,9,],[8,23,]),'TYPE_DECLARATION':([3,9,],[9,9,]),'COMMAND':([7,27,65,76,77,144,],[13,58,113,113,113,113,]),'VAR_DEF':([8,21,128,165,],[20,52,150,150,]),'VARIABLE':([8,21,128,165,],[21,21,21,21,]),'COMMAND_LIST':([13,58,],[26,103,]),'NAME':([14,35,47,61,],[28,75,87,107,]),'COM_EXP':([15,16,115,142,],[32,39,141,162,]),'PARAMETER':([15,16,18,25,30,31,34,46,60,67,79,81,106,110,115,122,125,135,136,137,138,142,],[33,33,45,45,62,64,74,86,105,118,105,45,105,64,33,145,45,105,105,105,105,33,]),'FOR_COMMAND':([17,],[40,]),'CONST_VALUE':([18,25,],[42,56,]),'CONST_EXP':([18,25,81,125,],[44,44,124,146,]),'ROUTINE_DEF':([20,49,],[48,88,]),'ROUTINE':([20,49,],[49,49,]),'FIELD':([22,101,127,156,],[53,134,134,169,]),'ASSIGN_EXPRESSION':([28,],[59,]),'PARAM_LIST':([31,110,],[63,140,]),'LOGIC_PARAM':([33,74,],[66,119,]),'COMP_OP':([33,74,],[67,67,]),'ASSIGNMENT_STMT':([41,],[78,]),'CONST_EXP_L':([45,],[80,]),'MATH_OP':([45,86,],[81,125,]),'ID_LIST':([54,130,],[92,152,]),'DATA_TYPE':([55,129,147,172,],[95,151,165,174,]),'EXP':([60,79,106,135,136,137,138,],[104,123,139,157,158,159,160,]),'COMMAND_BLOCK':([65,76,77,144,],[111,120,121,163,]),'COM_EXP_L':([66,],[114,]),'LOGIC_OP':([66,119,],[115,142,]),'ROUTINE_PARAM':([89,90,],[126,128,]),'FIELDS':([101,127,],[133,148,]),'ELSE_ALTERNATIVE':([120,],[143,]),'ROUTINE_BLOCK':([128,165,],[149,171,]),'FIELD_LIST':([134,169,],[155,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> DECLARATIONS BLOCK','PROGRAM',2,'p_program','syntactic.py',16),
  ('BLOCK -> BEGIN COMMAND COMMAND_LIST END','BLOCK',4,'p_block','syntactic.py',20),
  ('DECLARATIONS -> CONST_DEF TYPE_DEF VAR_DEF ROUTINE_DEF','DECLARATIONS',4,'p_declarations','syntactic.py',24),
  ('CONST_DEF -> CONSTANT CONST_DEF','CONST_DEF',2,'p_const_def','syntactic.py',28),
  ('CONST_DEF -> <empty>','CONST_DEF',0,'p_const_def','syntactic.py',29),
  ('TYPE_DEF -> TYPE_DECLARATION TYPE_DEF','TYPE_DEF',2,'p_type_def','syntactic.py',36),
  ('TYPE_DEF -> <empty>','TYPE_DEF',0,'p_type_def','syntactic.py',37),
  ('VAR_DEF -> VARIABLE VAR_DEF','VAR_DEF',2,'p_var_def','syntactic.py',43),
  ('VAR_DEF -> <empty>','VAR_DEF',0,'p_var_def','syntactic.py',44),
  ('ROUTINE_DEF -> ROUTINE ROUTINE_DEF','ROUTINE_DEF',2,'p_routine_def','syntactic.py',51),
  ('ROUTINE_DEF -> <empty>','ROUTINE_DEF',0,'p_routine_def','syntactic.py',52),
  ('CONSTANT -> CONST ID = CONST_VALUE ;','CONSTANT',5,'p_constant','syntactic.py',59),
  ('CONST_VALUE -> STRING','CONST_VALUE',1,'p_const_value','syntactic.py',63),
  ('CONST_VALUE -> CONST_EXP','CONST_VALUE',1,'p_const_value','syntactic.py',64),
  ('TYPE_DECLARATION -> TYPE ID = DATA_TYPE ;','TYPE_DECLARATION',5,'p_type_declaration','syntactic.py',68),
  ('VARIABLE -> VAR FIELD ;','VARIABLE',3,'p_variable','syntactic.py',72),
  ('ID_LIST -> , ID ID_LIST','ID_LIST',3,'p_id_list','syntactic.py',76),
  ('ID_LIST -> <empty>','ID_LIST',0,'p_id_list','syntactic.py',77),
  ('FIELDS -> FIELD FIELD_LIST','FIELDS',2,'p_fields','syntactic.py',84),
  ('FIELD -> ID ID_LIST : DATA_TYPE','FIELD',4,'p_field','syntactic.py',88),
  ('FIELD_LIST -> ; FIELD FIELD_LIST','FIELD_LIST',3,'p_field_list','syntactic.py',92),
  ('FIELD_LIST -> <empty>','FIELD_LIST',0,'p_field_list','syntactic.py',93),
  ('DATA_TYPE -> INTEGER','DATA_TYPE',1,'p_data_type','syntactic.py',100),
  ('DATA_TYPE -> REAL','DATA_TYPE',1,'p_data_type','syntactic.py',101),
  ('DATA_TYPE -> CHAR','DATA_TYPE',1,'p_data_type','syntactic.py',102),
  ('DATA_TYPE -> BOOLEAN','DATA_TYPE',1,'p_data_type','syntactic.py',103),
  ('DATA_TYPE -> ARRAY [ NUMBER ] OF DATA_TYPE','DATA_TYPE',6,'p_data_type','syntactic.py',104),
  ('DATA_TYPE -> RECORD FIELDS END','DATA_TYPE',3,'p_data_type','syntactic.py',105),
  ('DATA_TYPE -> ID','DATA_TYPE',1,'p_data_type','syntactic.py',106),
  ('ROUTINE -> FUNCTION ID ROUTINE_PARAM : DATA_TYPE ROUTINE_BLOCK','ROUTINE',6,'p_routine','syntactic.py',117),
  ('ROUTINE -> PROCEDURE ID ROUTINE_PARAM ROUTINE_BLOCK','ROUTINE',4,'p_routine','syntactic.py',118),
  ('ROUTINE_PARAM -> ( FIELDS )','ROUTINE_PARAM',3,'p_routine_param','syntactic.py',125),
  ('ROUTINE_PARAM -> <empty>','ROUTINE_PARAM',0,'p_routine_param','syntactic.py',126),
  ('ROUTINE_BLOCK -> VAR_DEF BLOCK','ROUTINE_BLOCK',2,'p_routine_block','syntactic.py',133),
  ('COMMAND_LIST -> ; COMMAND COMMAND_LIST','COMMAND_LIST',3,'p_command_list','syntactic.py',137),
  ('COMMAND_LIST -> <empty>','COMMAND_LIST',0,'p_command_list','syntactic.py',138),
  ('COMMAND_BLOCK -> BLOCK','COMMAND_BLOCK',1,'p_command_block','syntactic.py',145),
  ('COMMAND_BLOCK -> COMMAND','COMMAND_BLOCK',1,'p_command_block','syntactic.py',146),
  ('COMMAND -> ID NAME ASSIGN_EXPRESSION','COMMAND',3,'p_command','syntactic.py',149),
  ('COMMAND -> WHILE COM_EXP DO COMMAND_BLOCK','COMMAND',4,'p_command','syntactic.py',150),
  ('COMMAND -> IF COM_EXP THEN COMMAND_BLOCK ELSE_ALTERNATIVE','COMMAND',5,'p_command','syntactic.py',151),
  ('COMMAND -> FOR FOR_COMMAND DO COMMAND_BLOCK','COMMAND',4,'p_command','syntactic.py',152),
  ('COMMAND -> WRITE CONST_VALUE','COMMAND',2,'p_command','syntactic.py',153),
  ('COMMAND -> READ ID NAME','COMMAND',3,'p_command','syntactic.py',154),
  ('ASSIGN_EXPRESSION -> ASSIGNMENT EXP','ASSIGN_EXPRESSION',2,'p_assign_expression','syntactic.py',169),
  ('FOR_COMMAND -> ID ASSIGNMENT_STMT TO PARAMETER','FOR_COMMAND',4,'p_for_command','syntactic.py',173),
  ('ELSE_ALTERNATIVE -> ELSE COMMAND_BLOCK','ELSE_ALTERNATIVE',2,'p_else_alternative','syntactic.py',177),
  ('ELSE_ALTERNATIVE -> <empty>','ELSE_ALTERNATIVE',0,'p_else_alternative','syntactic.py',178),
  ('ASSIGNMENT_STMT -> ASSIGNMENT EXP','ASSIGNMENT_STMT',2,'p_assignment_statement','syntactic.py',185),
  ('PARAM_LIST -> PARAMETER , PARAM_LIST','PARAM_LIST',3,'p_param_list','syntactic.py',188),
  ('PARAM_LIST -> PARAMETER','PARAM_LIST',1,'p_param_list','syntactic.py',189),
  ('PARAM_LIST -> <empty>','PARAM_LIST',0,'p_param_list','syntactic.py',190),
  ('EXP -> PARAMETER','EXP',1,'p_exp','syntactic.py',199),
  ('EXP -> EXP + EXP','EXP',3,'p_exp','syntactic.py',200),
  ('EXP -> EXP - EXP','EXP',3,'p_exp','syntactic.py',201),
  ('EXP -> ( EXP )','EXP',3,'p_exp','syntactic.py',202),
  ('EXP -> EXP * EXP','EXP',3,'p_exp','syntactic.py',203),
  ('EXP -> EXP / EXP','EXP',3,'p_exp','syntactic.py',204),
  ('EXP_L1 -> MATH_OP EXP','EXP_L1',2,'p_exp_l1','syntactic.py',214),
  ('EXP_L1 -> LOGIC_PARAM LOGIC_EXP','EXP_L1',2,'p_exp_l1','syntactic.py',215),
  ('EXP_L1 -> <empty>','EXP_L1',0,'p_exp_l1','syntactic.py',216),
  ('LOGIC_EXP -> LOGIC_OP EXP','LOGIC_EXP',2,'p_logic_exp','syntactic.py',226),
  ('LOGIC_EXP -> <empty>','LOGIC_EXP',0,'p_logic_exp','syntactic.py',227),
  ('LOGIC_PARAM -> COMP_OP PARAMETER','LOGIC_PARAM',2,'p_logic_param','syntactic.py',234),
  ('LOGIC_PARAM -> <empty>','LOGIC_PARAM',0,'p_logic_param','syntactic.py',235),
  ('EXP_L2 -> MATH_OP EXP )','EXP_L2',3,'p_exp_l2','syntactic.py',242),
  ('EXP_L2 -> LOGIC_PARAM LOGIC_OP EXP )','EXP_L2',4,'p_exp_l2','syntactic.py',243),
  ('CONST_EXP -> PARAMETER CONST_EXP_L','CONST_EXP',2,'p_const_exp','syntactic.py',250),
  ('CONST_EXP -> ( PARAMETER MATH_OP CONST_EXP )','CONST_EXP',5,'p_const_exp','syntactic.py',251),
  ('CONST_EXP_L -> MATH_OP CONST_EXP','CONST_EXP_L',2,'p_const_exp_l','syntactic.py',258),
  ('CONST_EXP_L -> <empty>','CONST_EXP_L',0,'p_const_exp_l','syntactic.py',259),
  ('COM_EXP -> PARAMETER LOGIC_PARAM COM_EXP_L','COM_EXP',3,'p_com_exp','syntactic.py',266),
  ('COM_EXP -> ( PARAMETER LOGIC_PARAM LOGIC_OP COM_EXP )','COM_EXP',6,'p_com_exp','syntactic.py',267),
  ('COM_EXP_L -> LOGIC_OP COM_EXP','COM_EXP_L',2,'p_com_exp_l','syntactic.py',274),
  ('COM_EXP_L -> <empty>','COM_EXP_L',0,'p_com_exp_l','syntactic.py',275),
  ('PARAMETER -> ID NAME','PARAMETER',2,'p_parameter','syntactic.py',282),
  ('PARAMETER -> NUMBER','PARAMETER',1,'p_parameter','syntactic.py',283),
  ('PARAMETER -> FALSE','PARAMETER',1,'p_parameter','syntactic.py',284),
  ('PARAMETER -> TRUE','PARAMETER',1,'p_parameter','syntactic.py',285),
  ('LOGIC_OP -> AND','LOGIC_OP',1,'p_logic_op','syntactic.py',292),
  ('LOGIC_OP -> OR','LOGIC_OP',1,'p_logic_op','syntactic.py',293),
  ('COMP_OP -> LESS_THAN','COMP_OP',1,'p_comp_op','syntactic.py',297),
  ('COMP_OP -> GREATER_THAN','COMP_OP',1,'p_comp_op','syntactic.py',298),
  ('COMP_OP -> LESS_EQUAL','COMP_OP',1,'p_comp_op','syntactic.py',299),
  ('COMP_OP -> GREATER_EQUAL','COMP_OP',1,'p_comp_op','syntactic.py',300),
  ('COMP_OP -> EQUAL','COMP_OP',1,'p_comp_op','syntactic.py',301),
  ('COMP_OP -> NOT_EQUALS','COMP_OP',1,'p_comp_op','syntactic.py',302),
  ('MATH_OP -> +','MATH_OP',1,'p_math_op','syntactic.py',306),
  ('MATH_OP -> -','MATH_OP',1,'p_math_op','syntactic.py',307),
  ('MATH_OP -> *','MATH_OP',1,'p_math_op','syntactic.py',308),
  ('MATH_OP -> /','MATH_OP',1,'p_math_op','syntactic.py',309),
  ('NAME -> . ID NAME','NAME',3,'p_name','syntactic.py',313),
  ('NAME -> [ PARAMETER ]','NAME',3,'p_name','syntactic.py',314),
  ('NAME -> ( PARAM_LIST )','NAME',3,'p_name','syntactic.py',315),
  ('NAME -> <empty>','NAME',0,'p_name','syntactic.py',316),
]
