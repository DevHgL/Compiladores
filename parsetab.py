
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftLOGIC_OP_ORleftLOGIC_OP_ANDnonassocCOMP_OPleft+-left*/nonassocIFXnonassocELSEARRAY ASSIGNMENT BEGIN BOOLEAN CHAR COMP_OP CONST DO ELSE END EQUAL FALSE FOR FUNCTION GREATER_EQUAL GREATER_THAN ID IF INTEGER LESS_EQUAL LESS_THAN LOGIC_OP_AND LOGIC_OP_OR NOT_EQUALS NUMBER OF PROCEDURE READ REAL RECORD STRING THEN TO TRUE TYPE VAR WHILE WRITEPROGRAM : DECLARATIONS BLOCKBLOCK : BEGIN COMMAND_LIST END\n             | BEGIN ENDDECLARATIONS : CONST_DEF TYPE_DEF VAR_DEFCONST_DEF : CONSTANT CONST_DEF\n                 | CONSTANT : CONST ID '=' CONST_VALUE ';'CONST_VALUE : STRING\n                   | CONST_EXPCONST_EXP : NUMBER\n                 | '(' CONST_EXP ')'\n                 | CONST_EXP '+' CONST_EXP\n                 | CONST_EXP '-' CONST_EXP\n                 | CONST_EXP '*' CONST_EXP\n                 | CONST_EXP '/' CONST_EXPTYPE_DEF : TYPE_DECLARATION TYPE_DEF\n                | TYPE_DECLARATION : TYPE ID '=' DATA_TYPE ';'DATA_TYPE : INTEGER\n                 | REAL\n                 | CHAR\n                 | BOOLEAN\n                 | ARRAY '[' NUMBER ']' OF DATA_TYPE\n                 | RECORD FIELDS END\n                 | IDVAR_DEF : VARIABLE VAR_DEF\n               | VARIABLE : VAR ID_LIST ':' DATA_TYPE ';'ID_LIST : ID\n               | ID_LIST ',' IDFIELDS : FIELD FIELD_LISTFIELD : ID ':' DATA_TYPEFIELD_LIST : ';' FIELD FIELD_LIST\n                  | COMMAND_LIST : COMMAND\n                    | COMMAND_LIST ';' COMMANDCOMMAND : IF '(' COM_EXP ')' THEN COMMAND %prec IFX\n               | IF '(' COM_EXP ')' THEN COMMAND ELSE COMMAND\n               | WHILE '(' COM_EXP ')' DO COMMAND\n               | BEGIN COMMAND_LIST END\n               | ID ASSIGNMENT EXP\n               | ID ASSIGNMENT FUNCTION_CALLFUNCTION_CALL : ID '(' PARAM_LIST ')'PARAM_LIST : EXP\n                  | PARAM_LIST ',' EXP\n                  | COM_EXP : EXP COMP_OP EXP\n               | COM_EXP LOGIC_OP_OR COM_EXP\n               | COM_EXP LOGIC_OP_AND COM_EXPEXP : EXP '+' EXP\n           | EXP '-' EXP\n           | EXP '*' EXP\n           | EXP '/' EXP\n           | '(' EXP ')'\n           | ID\n           | NUMBER\n           | TRUE\n           | FALSE"
    
_lr_action_items = {'TYPE':([0,3,4,9,11,64,83,],[-6,10,-6,10,-5,-7,-18,]),'VAR':([0,3,4,8,9,11,21,23,64,83,105,],[-6,-17,-6,22,-17,-5,22,-16,-7,-18,-28,]),'BEGIN':([0,2,3,4,7,8,9,11,13,20,21,23,28,32,64,83,94,102,105,118,],[-6,7,-17,-6,13,-27,-17,-5,13,-4,-27,-16,13,-26,-7,-18,13,13,-28,13,]),'CONST':([0,4,64,],[5,5,-7,]),'$end':([1,6,15,27,],[0,-1,-3,-2,]),'ID':([5,7,10,13,22,28,29,30,31,35,43,54,55,63,72,73,74,75,76,77,78,80,94,102,109,110,114,118,120,],[12,19,24,19,34,19,46,46,51,56,46,56,82,87,46,46,46,46,46,46,46,46,19,19,87,56,46,19,56,]),'END':([7,14,16,26,41,42,46,47,48,49,51,52,53,56,58,59,60,61,85,86,93,98,99,100,101,107,108,111,112,113,116,117,121,122,123,],[15,27,-35,41,-40,-36,-55,-56,-57,-58,-55,-41,-42,-25,-19,-20,-21,-22,107,-34,-54,-50,-51,-52,-53,-24,-31,-37,-39,-43,-34,-32,-33,-38,-23,]),'IF':([7,13,28,94,102,118,],[17,17,17,17,17,17,]),'WHILE':([7,13,28,94,102,118,],[18,18,18,18,18,18,]),'=':([12,24,],[25,35,]),';':([14,16,26,36,37,38,39,41,42,46,47,48,49,51,52,53,56,57,58,59,60,61,81,86,88,89,90,91,92,93,98,99,100,101,107,111,112,113,116,117,122,123,],[28,-35,28,64,-8,-9,-10,-40,-36,-55,-56,-57,-58,-55,-41,-42,-25,83,-19,-20,-21,-22,105,109,-12,-13,-14,-15,-11,-54,-50,-51,-52,-53,-24,-37,-39,-43,109,-32,-38,-23,]),'(':([17,18,25,29,30,31,40,43,51,65,66,67,68,72,73,74,75,76,77,78,80,114,],[29,30,40,43,43,43,40,43,80,40,40,40,40,43,43,43,43,43,43,43,43,43,]),'ASSIGNMENT':([19,],[31,]),'STRING':([25,],[37,]),'NUMBER':([25,29,30,31,40,43,65,66,67,68,72,73,74,75,76,77,78,80,84,114,],[39,47,47,47,39,47,39,39,39,39,47,47,47,47,47,47,47,47,106,47,]),'TRUE':([29,30,31,43,72,73,74,75,76,77,78,80,114,],[48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([29,30,31,43,72,73,74,75,76,77,78,80,114,],[49,49,49,49,49,49,49,49,49,49,49,49,49,]),':':([33,34,82,87,],[54,-29,-30,110,]),',':([33,34,46,47,48,49,80,82,93,98,99,100,101,103,104,119,],[55,-29,-55,-56,-57,-58,-46,-30,-54,-50,-51,-52,-53,114,-44,-45,]),'INTEGER':([35,54,110,120,],[58,58,58,58,]),'REAL':([35,54,110,120,],[59,59,59,59,]),'CHAR':([35,54,110,120,],[60,60,60,60,]),'BOOLEAN':([35,54,110,120,],[61,61,61,61,]),'ARRAY':([35,54,110,120,],[62,62,62,62,]),'RECORD':([35,54,110,120,],[63,63,63,63,]),'+':([38,39,45,46,47,48,49,51,52,69,70,88,89,90,91,92,93,97,98,99,100,101,104,119,],[65,-10,75,-55,-56,-57,-58,-55,75,65,75,-12,-13,-14,-15,-11,-54,75,-50,-51,-52,-53,75,75,]),'-':([38,39,45,46,47,48,49,51,52,69,70,88,89,90,91,92,93,97,98,99,100,101,104,119,],[66,-10,76,-55,-56,-57,-58,-55,76,66,76,-12,-13,-14,-15,-11,-54,76,-50,-51,-52,-53,76,76,]),'*':([38,39,45,46,47,48,49,51,52,69,70,88,89,90,91,92,93,97,98,99,100,101,104,119,],[67,-10,77,-55,-56,-57,-58,-55,77,67,77,67,67,-14,-15,-11,-54,77,77,77,-52,-53,77,77,]),'/':([38,39,45,46,47,48,49,51,52,69,70,88,89,90,91,92,93,97,98,99,100,101,104,119,],[68,-10,78,-55,-56,-57,-58,-55,78,68,78,68,68,-14,-15,-11,-54,78,78,78,-52,-53,78,78,]),')':([39,44,46,47,48,49,50,69,70,80,88,89,90,91,92,93,95,96,97,98,99,100,101,103,104,119,],[-10,71,-55,-56,-57,-58,79,92,93,-46,-12,-13,-14,-15,-11,-54,-48,-49,-47,-50,-51,-52,-53,113,-44,-45,]),'ELSE':([41,46,47,48,49,51,52,53,93,98,99,100,101,111,112,113,122,],[-40,-55,-56,-57,-58,-55,-41,-42,-54,-50,-51,-52,-53,118,-39,-43,-38,]),'LOGIC_OP_OR':([44,46,47,48,49,50,93,95,96,97,98,99,100,101,],[72,-55,-56,-57,-58,72,-54,-48,-49,-47,-50,-51,-52,-53,]),'LOGIC_OP_AND':([44,46,47,48,49,50,93,95,96,97,98,99,100,101,],[73,-55,-56,-57,-58,73,-54,73,-49,-47,-50,-51,-52,-53,]),'COMP_OP':([45,46,47,48,49,93,98,99,100,101,],[74,-55,-56,-57,-58,-54,-50,-51,-52,-53,]),'[':([62,],[84,]),'THEN':([71,],[94,]),'DO':([79,],[102,]),']':([106,],[115,]),'OF':([115,],[120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'DECLARATIONS':([0,],[2,]),'CONST_DEF':([0,4,],[3,11,]),'CONSTANT':([0,4,],[4,4,]),'BLOCK':([2,],[6,]),'TYPE_DEF':([3,9,],[8,23,]),'TYPE_DECLARATION':([3,9,],[9,9,]),'COMMAND_LIST':([7,13,],[14,26,]),'COMMAND':([7,13,28,94,102,118,],[16,16,42,111,112,122,]),'VAR_DEF':([8,21,],[20,32,]),'VARIABLE':([8,21,],[21,21,]),'ID_LIST':([22,],[33,]),'CONST_VALUE':([25,],[36,]),'CONST_EXP':([25,40,65,66,67,68,],[38,69,88,89,90,91,]),'COM_EXP':([29,30,72,73,],[44,50,95,96,]),'EXP':([29,30,31,43,72,73,74,75,76,77,78,80,114,],[45,45,52,70,45,45,97,98,99,100,101,104,119,]),'FUNCTION_CALL':([31,],[53,]),'DATA_TYPE':([35,54,110,120,],[57,81,117,123,]),'FIELDS':([63,],[85,]),'FIELD':([63,109,],[86,116,]),'PARAM_LIST':([80,],[103,]),'FIELD_LIST':([86,116,],[108,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> DECLARATIONS BLOCK','PROGRAM',2,'p_program','syntactic.py',26),
  ('BLOCK -> BEGIN COMMAND_LIST END','BLOCK',3,'p_block','syntactic.py',30),
  ('BLOCK -> BEGIN END','BLOCK',2,'p_block','syntactic.py',31),
  ('DECLARATIONS -> CONST_DEF TYPE_DEF VAR_DEF','DECLARATIONS',3,'p_declarations','syntactic.py',38),
  ('CONST_DEF -> CONSTANT CONST_DEF','CONST_DEF',2,'p_const_def','syntactic.py',42),
  ('CONST_DEF -> <empty>','CONST_DEF',0,'p_const_def','syntactic.py',43),
  ('CONSTANT -> CONST ID = CONST_VALUE ;','CONSTANT',5,'p_constant','syntactic.py',50),
  ('CONST_VALUE -> STRING','CONST_VALUE',1,'p_const_value','syntactic.py',54),
  ('CONST_VALUE -> CONST_EXP','CONST_VALUE',1,'p_const_value','syntactic.py',55),
  ('CONST_EXP -> NUMBER','CONST_EXP',1,'p_const_exp','syntactic.py',59),
  ('CONST_EXP -> ( CONST_EXP )','CONST_EXP',3,'p_const_exp','syntactic.py',60),
  ('CONST_EXP -> CONST_EXP + CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',61),
  ('CONST_EXP -> CONST_EXP - CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',62),
  ('CONST_EXP -> CONST_EXP * CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',63),
  ('CONST_EXP -> CONST_EXP / CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',64),
  ('TYPE_DEF -> TYPE_DECLARATION TYPE_DEF','TYPE_DEF',2,'p_type_def','syntactic.py',73),
  ('TYPE_DEF -> <empty>','TYPE_DEF',0,'p_type_def','syntactic.py',74),
  ('TYPE_DECLARATION -> TYPE ID = DATA_TYPE ;','TYPE_DECLARATION',5,'p_type_declaration','syntactic.py',81),
  ('DATA_TYPE -> INTEGER','DATA_TYPE',1,'p_data_type','syntactic.py',85),
  ('DATA_TYPE -> REAL','DATA_TYPE',1,'p_data_type','syntactic.py',86),
  ('DATA_TYPE -> CHAR','DATA_TYPE',1,'p_data_type','syntactic.py',87),
  ('DATA_TYPE -> BOOLEAN','DATA_TYPE',1,'p_data_type','syntactic.py',88),
  ('DATA_TYPE -> ARRAY [ NUMBER ] OF DATA_TYPE','DATA_TYPE',6,'p_data_type','syntactic.py',89),
  ('DATA_TYPE -> RECORD FIELDS END','DATA_TYPE',3,'p_data_type','syntactic.py',90),
  ('DATA_TYPE -> ID','DATA_TYPE',1,'p_data_type','syntactic.py',91),
  ('VAR_DEF -> VARIABLE VAR_DEF','VAR_DEF',2,'p_var_def','syntactic.py',102),
  ('VAR_DEF -> <empty>','VAR_DEF',0,'p_var_def','syntactic.py',103),
  ('VARIABLE -> VAR ID_LIST : DATA_TYPE ;','VARIABLE',5,'p_variable','syntactic.py',110),
  ('ID_LIST -> ID','ID_LIST',1,'p_id_list','syntactic.py',114),
  ('ID_LIST -> ID_LIST , ID','ID_LIST',3,'p_id_list','syntactic.py',115),
  ('FIELDS -> FIELD FIELD_LIST','FIELDS',2,'p_fields','syntactic.py',122),
  ('FIELD -> ID : DATA_TYPE','FIELD',3,'p_field','syntactic.py',126),
  ('FIELD_LIST -> ; FIELD FIELD_LIST','FIELD_LIST',3,'p_field_list','syntactic.py',130),
  ('FIELD_LIST -> <empty>','FIELD_LIST',0,'p_field_list','syntactic.py',131),
  ('COMMAND_LIST -> COMMAND','COMMAND_LIST',1,'p_command_list','syntactic.py',138),
  ('COMMAND_LIST -> COMMAND_LIST ; COMMAND','COMMAND_LIST',3,'p_command_list','syntactic.py',139),
  ('COMMAND -> IF ( COM_EXP ) THEN COMMAND','COMMAND',6,'p_command','syntactic.py',146),
  ('COMMAND -> IF ( COM_EXP ) THEN COMMAND ELSE COMMAND','COMMAND',8,'p_command','syntactic.py',147),
  ('COMMAND -> WHILE ( COM_EXP ) DO COMMAND','COMMAND',6,'p_command','syntactic.py',148),
  ('COMMAND -> BEGIN COMMAND_LIST END','COMMAND',3,'p_command','syntactic.py',149),
  ('COMMAND -> ID ASSIGNMENT EXP','COMMAND',3,'p_command','syntactic.py',150),
  ('COMMAND -> ID ASSIGNMENT FUNCTION_CALL','COMMAND',3,'p_command','syntactic.py',151),
  ('FUNCTION_CALL -> ID ( PARAM_LIST )','FUNCTION_CALL',4,'p_function_call','syntactic.py',164),
  ('PARAM_LIST -> EXP','PARAM_LIST',1,'p_param_list','syntactic.py',168),
  ('PARAM_LIST -> PARAM_LIST , EXP','PARAM_LIST',3,'p_param_list','syntactic.py',169),
  ('PARAM_LIST -> <empty>','PARAM_LIST',0,'p_param_list','syntactic.py',170),
  ('COM_EXP -> EXP COMP_OP EXP','COM_EXP',3,'p_com_exp','syntactic.py',179),
  ('COM_EXP -> COM_EXP LOGIC_OP_OR COM_EXP','COM_EXP',3,'p_com_exp','syntactic.py',180),
  ('COM_EXP -> COM_EXP LOGIC_OP_AND COM_EXP','COM_EXP',3,'p_com_exp','syntactic.py',181),
  ('EXP -> EXP + EXP','EXP',3,'p_exp','syntactic.py',191),
  ('EXP -> EXP - EXP','EXP',3,'p_exp','syntactic.py',192),
  ('EXP -> EXP * EXP','EXP',3,'p_exp','syntactic.py',193),
  ('EXP -> EXP / EXP','EXP',3,'p_exp','syntactic.py',194),
  ('EXP -> ( EXP )','EXP',3,'p_exp','syntactic.py',195),
  ('EXP -> ID','EXP',1,'p_exp','syntactic.py',196),
  ('EXP -> NUMBER','EXP',1,'p_exp','syntactic.py',197),
  ('EXP -> TRUE','EXP',1,'p_exp','syntactic.py',198),
  ('EXP -> FALSE','EXP',1,'p_exp','syntactic.py',199),
]
