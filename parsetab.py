
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocELSEnonassocIFleftLOGIC_OP_ORleftLOGIC_OP_ANDleft+-left*/rightUMINUSARRAY ASSIGNMENT BEGIN BOOLEAN CHAR COMP_OP CONST DO ELSE END EQUAL FALSE FOR FUNCTION GREATER_EQUAL GREATER_THAN ID IF INTEGER LESS_EQUAL LESS_THAN LOGIC_OP_AND LOGIC_OP_OR NOT_EQUALS NUMBER OF PROCEDURE READ REAL RECORD STRING THEN TO TRUE TYPE VAR WHILE WRITEPROGRAM : DECLARATIONS BLOCKBLOCK : BEGIN COMMAND_LIST END\n                   | BEGIN ENDDECLARATIONS : CONST_DEF TYPE_DEF VAR_DEFCONST_DEF : CONSTANT CONST_DEF\n                       | CONSTANT : CONST ID '=' CONST_VALUE ';'CONST_VALUE : STRING\n                         | CONST_EXPCONST_EXP : NUMBER\n                       | '(' CONST_EXP ')'\n                       | CONST_EXP '+' CONST_EXP\n                       | CONST_EXP '-' CONST_EXP\n                       | CONST_EXP '*' CONST_EXP\n                       | CONST_EXP '/' CONST_EXPTYPE_DEF : TYPE_DECLARATION TYPE_DEF\n                      | TYPE_DECLARATION : TYPE ID '=' DATA_TYPE ';'DATA_TYPE : INTEGER\n                       | REAL\n                       | CHAR\n                       | BOOLEAN\n                       | ARRAY '[' NUMBER ']' OF DATA_TYPE\n                       | RECORD FIELDS END\n                       | IDVAR_DEF : VARIABLE VAR_DEF\n                     | VARIABLE : VAR ID_LIST ':' DATA_TYPE ';'ID_LIST : ID\n                     | ID_LIST ',' IDFIELDS : FIELD FIELD_LISTFIELD : ID ':' DATA_TYPEFIELD_LIST : ';' FIELD FIELD_LIST\n                        | COMMAND_LIST : COMMAND\n                          | COMMAND_LIST ';' COMMANDCOMMAND : ASSIGN_STATEMENT\n                     | FUNCTION_CALL\n                     | CONDITIONAL\n                     | LOOP\n                     | BLOCKASSIGN_STATEMENT : ID ASSIGNMENT EXPFUNCTION_CALL : ID '(' PARAM_LIST ')'CONDITIONAL : IF '(' COM_EXP ')' THEN COMMAND\n                         | IF '(' COM_EXP ')' THEN COMMAND ELSE COMMANDLOOP : WHILE '(' COM_EXP ')' DO COMMANDPARAM_LIST : EXP\n                        | PARAM_LIST ',' EXP\n                        | COM_EXP : EXP COMP_OP EXP\n                     | COM_EXP LOGIC_OP_OR COM_EXP\n                     | COM_EXP LOGIC_OP_AND COM_EXPEXP : EXP '+' EXP\n                 | EXP '-' EXP\n                 | EXP '*' EXP\n                 | EXP '/' EXP\n                 | '(' EXP ')'\n                 | ID\n                 | NUMBER\n                 | TRUE\n                 | FALSEEXP : '-' EXP %prec UMINUS"
    
_lr_action_items = {'TYPE':([0,3,4,9,11,68,89,],[-6,10,-6,10,-5,-7,-18,]),'VAR':([0,3,4,8,9,11,25,27,68,89,110,],[-6,-17,-6,26,-17,-5,26,-16,-7,-18,-28,]),'BEGIN':([0,2,3,4,7,8,9,11,24,25,27,31,36,68,89,105,109,110,121,],[-6,7,-17,-6,7,-27,-17,-5,-4,-27,-16,7,-26,-7,-18,7,7,-28,7,]),'CONST':([0,4,68,],[5,5,-7,]),'$end':([1,6,14,30,],[0,-1,-3,-2,]),'ID':([5,7,10,26,31,32,33,34,35,39,48,49,58,59,67,74,75,76,77,81,83,84,85,105,109,114,115,121,122,],[12,21,28,38,21,46,46,46,46,60,46,46,60,88,93,46,46,46,46,46,46,46,46,21,21,93,60,21,60,]),'END':([7,13,14,15,16,17,18,19,20,30,45,46,47,50,51,52,60,62,63,64,65,78,80,91,92,99,100,101,102,103,112,113,116,117,119,120,123,124,125,],[14,30,-3,-35,-37,-38,-39,-40,-41,-2,-36,-58,-42,-59,-60,-61,-25,-19,-20,-21,-22,-62,-43,112,-34,-53,-54,-55,-56,-57,-24,-31,-44,-46,-34,-32,-33,-45,-23,]),'IF':([7,31,105,109,121,],[22,22,22,22,22,]),'WHILE':([7,31,105,109,121,],[23,23,23,23,23,]),'=':([12,28,],[29,39,]),';':([13,14,15,16,17,18,19,20,30,40,41,42,43,45,46,47,50,51,52,60,61,62,63,64,65,78,80,87,92,94,95,96,97,98,99,100,101,102,103,112,116,117,119,120,124,125,],[31,-3,-35,-37,-38,-39,-40,-41,-2,68,-8,-9,-10,-36,-58,-42,-59,-60,-61,-25,89,-19,-20,-21,-22,-62,-43,110,114,-12,-13,-14,-15,-11,-53,-54,-55,-56,-57,-24,-44,-46,114,-32,-45,-23,]),'ELSE':([14,16,17,18,19,20,30,46,47,50,51,52,78,80,99,100,101,102,103,116,117,124,],[-3,-37,-38,-39,-40,-41,-2,-58,-42,-59,-60,-61,-62,-43,-53,-54,-55,-56,-57,121,-46,-45,]),'ASSIGNMENT':([21,],[32,]),'(':([21,22,23,29,32,33,34,35,44,48,49,69,70,71,72,74,75,76,77,81,83,84,85,],[33,34,35,44,49,49,49,49,44,49,49,44,44,44,44,49,49,49,49,49,49,49,49,]),'STRING':([29,],[41,]),'NUMBER':([29,32,33,34,35,44,48,49,69,70,71,72,74,75,76,77,81,83,84,85,90,],[43,50,50,50,50,43,50,50,43,43,43,43,50,50,50,50,50,50,50,50,111,]),'TRUE':([32,33,34,35,48,49,74,75,76,77,81,83,84,85,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FALSE':([32,33,34,35,48,49,74,75,76,77,81,83,84,85,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'-':([32,33,34,35,42,43,46,47,48,49,50,51,52,54,56,73,74,75,76,77,78,79,81,83,84,85,94,95,96,97,98,99,100,101,102,103,104,108,],[48,48,48,48,70,-10,-58,75,48,48,-59,-60,-61,75,75,70,48,48,48,48,-62,75,48,48,48,48,-12,-13,-14,-15,-11,-53,-54,-55,-56,-57,75,75,]),')':([33,43,46,50,51,52,53,54,55,57,73,78,79,94,95,96,97,98,99,100,101,102,103,104,106,107,108,],[-49,-10,-58,-59,-60,-61,80,-47,82,86,98,-62,103,-12,-13,-14,-15,-11,-53,-54,-55,-56,-57,-48,-51,-52,-50,]),',':([33,37,38,46,50,51,52,53,54,78,88,99,100,101,102,103,104,],[-49,59,-29,-58,-59,-60,-61,81,-47,-62,-30,-53,-54,-55,-56,-57,-48,]),':':([37,38,88,93,],[58,-29,-30,115,]),'INTEGER':([39,58,115,122,],[62,62,62,62,]),'REAL':([39,58,115,122,],[63,63,63,63,]),'CHAR':([39,58,115,122,],[64,64,64,64,]),'BOOLEAN':([39,58,115,122,],[65,65,65,65,]),'ARRAY':([39,58,115,122,],[66,66,66,66,]),'RECORD':([39,58,115,122,],[67,67,67,67,]),'+':([42,43,46,47,50,51,52,54,56,73,78,79,94,95,96,97,98,99,100,101,102,103,104,108,],[69,-10,-58,74,-59,-60,-61,74,74,69,-62,74,-12,-13,-14,-15,-11,-53,-54,-55,-56,-57,74,74,]),'*':([42,43,46,47,50,51,52,54,56,73,78,79,94,95,96,97,98,99,100,101,102,103,104,108,],[71,-10,-58,76,-59,-60,-61,76,76,71,-62,76,71,71,-14,-15,-11,76,76,-55,-56,-57,76,76,]),'/':([42,43,46,47,50,51,52,54,56,73,78,79,94,95,96,97,98,99,100,101,102,103,104,108,],[72,-10,-58,77,-59,-60,-61,77,77,72,-62,77,72,72,-14,-15,-11,77,77,-55,-56,-57,77,77,]),'COMP_OP':([46,50,51,52,56,78,99,100,101,102,103,],[-58,-59,-60,-61,85,-62,-53,-54,-55,-56,-57,]),'LOGIC_OP_OR':([46,50,51,52,55,57,78,99,100,101,102,103,106,107,108,],[-58,-59,-60,-61,83,83,-62,-53,-54,-55,-56,-57,-51,-52,-50,]),'LOGIC_OP_AND':([46,50,51,52,55,57,78,99,100,101,102,103,106,107,108,],[-58,-59,-60,-61,84,84,-62,-53,-54,-55,-56,-57,84,-52,-50,]),'[':([66,],[90,]),'THEN':([82,],[105,]),'DO':([86,],[109,]),']':([111,],[118,]),'OF':([118,],[122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'DECLARATIONS':([0,],[2,]),'CONST_DEF':([0,4,],[3,11,]),'CONSTANT':([0,4,],[4,4,]),'BLOCK':([2,7,31,105,109,121,],[6,20,20,20,20,20,]),'TYPE_DEF':([3,9,],[8,27,]),'TYPE_DECLARATION':([3,9,],[9,9,]),'COMMAND_LIST':([7,],[13,]),'COMMAND':([7,31,105,109,121,],[15,45,116,117,124,]),'ASSIGN_STATEMENT':([7,31,105,109,121,],[16,16,16,16,16,]),'FUNCTION_CALL':([7,31,105,109,121,],[17,17,17,17,17,]),'CONDITIONAL':([7,31,105,109,121,],[18,18,18,18,18,]),'LOOP':([7,31,105,109,121,],[19,19,19,19,19,]),'VAR_DEF':([8,25,],[24,36,]),'VARIABLE':([8,25,],[25,25,]),'ID_LIST':([26,],[37,]),'CONST_VALUE':([29,],[40,]),'CONST_EXP':([29,44,69,70,71,72,],[42,73,94,95,96,97,]),'EXP':([32,33,34,35,48,49,74,75,76,77,81,83,84,85,],[47,54,56,56,78,79,99,100,101,102,104,56,56,108,]),'PARAM_LIST':([33,],[53,]),'COM_EXP':([34,35,83,84,],[55,57,106,107,]),'DATA_TYPE':([39,58,115,122,],[61,87,120,125,]),'FIELDS':([67,],[91,]),'FIELD':([67,114,],[92,119,]),'FIELD_LIST':([92,119,],[113,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> DECLARATIONS BLOCK','PROGRAM',2,'p_program','syntactic.py',29),
  ('BLOCK -> BEGIN COMMAND_LIST END','BLOCK',3,'p_block','syntactic.py',33),
  ('BLOCK -> BEGIN END','BLOCK',2,'p_block','syntactic.py',34),
  ('DECLARATIONS -> CONST_DEF TYPE_DEF VAR_DEF','DECLARATIONS',3,'p_declarations','syntactic.py',41),
  ('CONST_DEF -> CONSTANT CONST_DEF','CONST_DEF',2,'p_const_def','syntactic.py',45),
  ('CONST_DEF -> <empty>','CONST_DEF',0,'p_const_def','syntactic.py',46),
  ('CONSTANT -> CONST ID = CONST_VALUE ;','CONSTANT',5,'p_constant','syntactic.py',53),
  ('CONST_VALUE -> STRING','CONST_VALUE',1,'p_const_value','syntactic.py',57),
  ('CONST_VALUE -> CONST_EXP','CONST_VALUE',1,'p_const_value','syntactic.py',58),
  ('CONST_EXP -> NUMBER','CONST_EXP',1,'p_const_exp','syntactic.py',62),
  ('CONST_EXP -> ( CONST_EXP )','CONST_EXP',3,'p_const_exp','syntactic.py',63),
  ('CONST_EXP -> CONST_EXP + CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',64),
  ('CONST_EXP -> CONST_EXP - CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',65),
  ('CONST_EXP -> CONST_EXP * CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',66),
  ('CONST_EXP -> CONST_EXP / CONST_EXP','CONST_EXP',3,'p_const_exp','syntactic.py',67),
  ('TYPE_DEF -> TYPE_DECLARATION TYPE_DEF','TYPE_DEF',2,'p_type_def','syntactic.py',76),
  ('TYPE_DEF -> <empty>','TYPE_DEF',0,'p_type_def','syntactic.py',77),
  ('TYPE_DECLARATION -> TYPE ID = DATA_TYPE ;','TYPE_DECLARATION',5,'p_type_declaration','syntactic.py',84),
  ('DATA_TYPE -> INTEGER','DATA_TYPE',1,'p_data_type','syntactic.py',88),
  ('DATA_TYPE -> REAL','DATA_TYPE',1,'p_data_type','syntactic.py',89),
  ('DATA_TYPE -> CHAR','DATA_TYPE',1,'p_data_type','syntactic.py',90),
  ('DATA_TYPE -> BOOLEAN','DATA_TYPE',1,'p_data_type','syntactic.py',91),
  ('DATA_TYPE -> ARRAY [ NUMBER ] OF DATA_TYPE','DATA_TYPE',6,'p_data_type','syntactic.py',92),
  ('DATA_TYPE -> RECORD FIELDS END','DATA_TYPE',3,'p_data_type','syntactic.py',93),
  ('DATA_TYPE -> ID','DATA_TYPE',1,'p_data_type','syntactic.py',94),
  ('VAR_DEF -> VARIABLE VAR_DEF','VAR_DEF',2,'p_var_def','syntactic.py',105),
  ('VAR_DEF -> <empty>','VAR_DEF',0,'p_var_def','syntactic.py',106),
  ('VARIABLE -> VAR ID_LIST : DATA_TYPE ;','VARIABLE',5,'p_variable','syntactic.py',113),
  ('ID_LIST -> ID','ID_LIST',1,'p_id_list','syntactic.py',117),
  ('ID_LIST -> ID_LIST , ID','ID_LIST',3,'p_id_list','syntactic.py',118),
  ('FIELDS -> FIELD FIELD_LIST','FIELDS',2,'p_fields','syntactic.py',125),
  ('FIELD -> ID : DATA_TYPE','FIELD',3,'p_field','syntactic.py',129),
  ('FIELD_LIST -> ; FIELD FIELD_LIST','FIELD_LIST',3,'p_field_list','syntactic.py',133),
  ('FIELD_LIST -> <empty>','FIELD_LIST',0,'p_field_list','syntactic.py',134),
  ('COMMAND_LIST -> COMMAND','COMMAND_LIST',1,'p_command_list','syntactic.py',141),
  ('COMMAND_LIST -> COMMAND_LIST ; COMMAND','COMMAND_LIST',3,'p_command_list','syntactic.py',142),
  ('COMMAND -> ASSIGN_STATEMENT','COMMAND',1,'p_command','syntactic.py',149),
  ('COMMAND -> FUNCTION_CALL','COMMAND',1,'p_command','syntactic.py',150),
  ('COMMAND -> CONDITIONAL','COMMAND',1,'p_command','syntactic.py',151),
  ('COMMAND -> LOOP','COMMAND',1,'p_command','syntactic.py',152),
  ('COMMAND -> BLOCK','COMMAND',1,'p_command','syntactic.py',153),
  ('ASSIGN_STATEMENT -> ID ASSIGNMENT EXP','ASSIGN_STATEMENT',3,'p_assign_statement','syntactic.py',157),
  ('FUNCTION_CALL -> ID ( PARAM_LIST )','FUNCTION_CALL',4,'p_function_call','syntactic.py',161),
  ('CONDITIONAL -> IF ( COM_EXP ) THEN COMMAND','CONDITIONAL',6,'p_conditional','syntactic.py',165),
  ('CONDITIONAL -> IF ( COM_EXP ) THEN COMMAND ELSE COMMAND','CONDITIONAL',8,'p_conditional','syntactic.py',166),
  ('LOOP -> WHILE ( COM_EXP ) DO COMMAND','LOOP',6,'p_loop','syntactic.py',173),
  ('PARAM_LIST -> EXP','PARAM_LIST',1,'p_param_list','syntactic.py',177),
  ('PARAM_LIST -> PARAM_LIST , EXP','PARAM_LIST',3,'p_param_list','syntactic.py',178),
  ('PARAM_LIST -> <empty>','PARAM_LIST',0,'p_param_list','syntactic.py',179),
  ('COM_EXP -> EXP COMP_OP EXP','COM_EXP',3,'p_com_exp','syntactic.py',188),
  ('COM_EXP -> COM_EXP LOGIC_OP_OR COM_EXP','COM_EXP',3,'p_com_exp','syntactic.py',189),
  ('COM_EXP -> COM_EXP LOGIC_OP_AND COM_EXP','COM_EXP',3,'p_com_exp','syntactic.py',190),
  ('EXP -> EXP + EXP','EXP',3,'p_exp','syntactic.py',200),
  ('EXP -> EXP - EXP','EXP',3,'p_exp','syntactic.py',201),
  ('EXP -> EXP * EXP','EXP',3,'p_exp','syntactic.py',202),
  ('EXP -> EXP / EXP','EXP',3,'p_exp','syntactic.py',203),
  ('EXP -> ( EXP )','EXP',3,'p_exp','syntactic.py',204),
  ('EXP -> ID','EXP',1,'p_exp','syntactic.py',205),
  ('EXP -> NUMBER','EXP',1,'p_exp','syntactic.py',206),
  ('EXP -> TRUE','EXP',1,'p_exp','syntactic.py',207),
  ('EXP -> FALSE','EXP',1,'p_exp','syntactic.py',208),
  ('EXP -> - EXP','EXP',2,'p_exp_uminus','syntactic.py',217),
]
